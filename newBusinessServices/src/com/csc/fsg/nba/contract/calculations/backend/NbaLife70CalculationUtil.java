package com.csc.fsg.nba.contract.calculations.backend;

/* 
 * *******************************************************************************<BR>
 * This program contains trade secrets and confidential information which<BR>
 * are proprietary to CSC Financial Services Group®.  The use,<BR>
 * reproduction, distribution or disclosure of this program, in whole or in<BR>
 * part, without the express written permission of CSC Financial Services<BR>
 * Group is prohibited.  This program is also an unpublished work protected<BR>
 * under the copyright laws of the United States of America and other<BR>
 * countries.  If this program becomes published, the following notice shall<BR>
 * apply:
 *     Property of Computer Sciences Corporation.<BR>
 *     Confidential. Not for publication.<BR>
 *     Copyright (c) 2002-2008 Computer Sciences Corporation. All Rights Reserved.<BR>
 * 
 * *******************************************************************************<BR>
 */
import com.csc.fsg.nba.business.contract.merge.process.NbaCVContractMergeProcessor;
import com.csc.fsg.nba.business.contract.merge.process.NbaContractMergeProcessorBase;
import com.csc.fsg.nba.business.transaction.NbaContractChangeUtils;
import com.csc.fsg.nba.contract.calculations.NbaContractCalculationsConstants;
import com.csc.fsg.nba.exception.NbaBaseException;
import com.csc.fsg.nba.foundation.NbaOLifEId;
import com.csc.fsg.nba.foundation.NbaUtils;
import com.csc.fsg.nba.vo.NbaTXLife;
import com.csc.fsg.nba.vo.txlife.Holding;
import com.csc.fsg.nba.vo.txlife.SystemMessage;

/**
 * NbaLife70CalculatorUtil is the utility class to process merging the calculated values. 
 * <p>
 * <b>Modifications:</b><br>
 * <table border=0 cellspacing=5 cellpadding=5>
 * <thead>
 * <th align=left>Project</th><th align=left>Release</th><th align=left>Description</th>
 * </thead>
 * <tr><td>P2AXAL016CV</td><td>AXA Life Phase 2</td><td>Product Val - Life 70 Calculations</td></tr>
 * </table>
 * <p>
 * @author CSC FSG Developer
 * @version 7.0.0
 * @since New Business Accelerator - Version 7
 */
public class NbaLife70CalculationUtil extends NbaContractChangeUtils {
	NbaContractMergeProcessorBase mergeProcessor = null;
	NbaOLifEId nbaOlifeId = null;
	
	public NbaLife70CalculationUtil(NbaTXLife firstTXLife, NbaTXLife secondTXLife, NbaOLifEId olifeId, String calcType) {
		nbAContract = firstTXLife;
		beContract = secondTXLife;
		nbaOlifeId = olifeId;
		if (calcType.equals(NbaContractCalculationsConstants.CALC_TYPE_CV_CALC)) {
			mergeProcessor = new NbaCVContractMergeProcessor();
		} else {
			mergeProcessor = new NbaContractMergeProcessorBase();
		}
	}

	public void performCalculationMerge() throws NbaBaseException {
		mergeHolding(nbAContract.getPrimaryHolding(), beContract.getPrimaryHolding());
		setCommonCalculationValues(nbAContract.getPrimaryHolding(), beContract.getPrimaryHolding());
	}

	public void mergeHolding(Holding firstHolding, Holding secondHolding) throws NbaBaseException {
		super.initialize();
		super.mergeHolding(firstHolding, secondHolding);
		mergeSystemMessages(firstHolding, secondHolding);
	}
	
	public void mergeSystemMessages(Holding pendingHolding, Holding calcHolding) {
		for (int i=0; i < calcHolding.getSystemMessageCount(); i++) {
			SystemMessage message = calcHolding.getSystemMessageAt(i);
			mergeProcessor.processSystemMessage(message, pendingHolding);
			if (nbaOlifeId != null) {
				message.deleteId(); //delete the Id generated by L70
				nbaOlifeId.setId(message); //regenerate the Id as per ACORD standard
			} else {
				message.setId("SystemMessage_" + message.getId());
			}
			if(!duplicateMessage(message)) {
				message.setActionAdd();
				pendingHolding.getSystemMessage().add(message);
			}
		}
	}
	
	public void setCommonCalculationValues(Holding nbaHolding, Holding calcHolding) {
		//TODO - Set the values which are not directly mapped to the calculated fields but are same as those fields.
	}
	
	/**
	 * Determine if a system message is already present on the policy. Ignore any errors which are marked for deletion.
	 * Compare only the MsgCode, MsgDescription, and relatedObjectID fields.
	 */
	protected boolean duplicateMessage(SystemMessage newMsg) {
		if (newMsg == null) {
			return true; //tell caller not to add a new message
		}
		int systemMessageCount = nbAContract.getPrimaryHolding().getSystemMessageCount();
		//Check content
		for (int msgIdx = 0; msgIdx < systemMessageCount; msgIdx++) {
			SystemMessage oldMsg = nbAContract.getPrimaryHolding().getSystemMessageAt(msgIdx);
			if (! NbaUtils.isDeleted(oldMsg)) {
				if (oldMsg.getMessageCode() == newMsg.getMessageCode()) {
					String oldMsgDescription =  oldMsg.getMessageDescription() == null ? "" : oldMsg.getMessageDescription();
					if (oldMsgDescription.equals(newMsg.getMessageDescription())) {
						return true;
					}
				}
			}
		}
		return false;
	}	
}
