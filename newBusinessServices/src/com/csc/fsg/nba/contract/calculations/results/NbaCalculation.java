/*
 * DO NOT EDIT!
 *
 * This file was generated by the Breeze XML Studio code generator.
 *
 *        Project: file:/D:/nba/NbaCalculation.xsd Binding
 *     Class Name: NbaCalculation
 *           Date: Mon Apr 05 13:34:30 CDT 2004
 * Breeze Version: 3.0.0 build 382
 *
 * IMPORTANT: Please see your Breeze license for more information on
 *            where and how this generated code may be used.
 *
 */

package com.csc.fsg.nba.contract.calculations.results;


import java.io.InputStream;
import java.io.OutputStream;

import com.tbf.xml.FormattedOutputStream;
import com.tbf.xml.Validateable;
import com.tbf.xml.XmlAttributeList;
import com.tbf.xml.XmlElement;
import com.tbf.xml.XmlIntegerValidator;
import com.tbf.xml.XmlNamespaceManager;
import com.tbf.xml.XmlObject;
import com.tbf.xml.XmlOutputStream;
import com.tbf.xml.XmlValidationError;
import com.tbf.xml.XmlValidator;

/**
 * NbaCalculation class.
 *
 */
public class NbaCalculation
	implements com.tbf.xml.XmlObject,
	com.tbf.xml.Validateable,
	java.io.Serializable {

	/**
	 * Constant for "calcResultCode" node name.
	 */
	public static final String $CALC_RESULT_CODE = "calcResultCode";

	/**
	 * Constant for "CalculationResult" node name.
	 */
	public static final String $CALCULATION_RESULT = "CalculationResult";

	/**
	 * Constant for "NbaCalculation" node name.
	 */
	public static final String $NBA_CALCULATION = "NbaCalculation";


	/**
	 * Declarations for the XML related fields.
	 */
	protected java.util.Vector _CalculationResult = new java.util.Vector(4, 0);
	protected long _CalcResultCode = -1L;
	protected boolean _has_CalcResultCode_ = false;


	/**
	 * Holds the parent object of this object.
	 */
	protected transient XmlObject _parent_ = null;


	/**
	 * Storage for UNEXPECTED_XML errors.
	 */
	protected transient java.util.Vector _unexpected_xml_errors_ = null;


	/**
	 * Default no args constructor.
	 */
	public NbaCalculation () {
	}


	/**
	 * Creates and populates an instance from the provided parse tree.
	 *
	 * @param  xml  the parse tree
	 */
	public NbaCalculation (XmlElement xml) {
		unmarshal(xml);
	}


	/**
	 * Creates and populates an instance from the provided parse tree.
	 *
	 * @param  xml  the parse tree
	 * @param  parent  the containibg XmlObject
	 */
	public NbaCalculation (XmlElement xml, XmlObject parent) {
		_parent_ = parent;
		unmarshal(xml);
	}


	/**
	 * Get the CalculationResult property.
	 */
	public java.util.Vector getCalculationResult () {
		return (_CalculationResult);
	}


	public CalculationResult getCalculationResultAt (int index)
			throws IndexOutOfBoundsException {
		return ((CalculationResult)_CalculationResult.elementAt(index));
	}


	/**
	 * Get the count of elements in the CalculationResult property.
	 */
	public int getCalculationResultCount () {
		if (_CalculationResult == null) {
			return (0);
		}

		return (_CalculationResult.size());
	}


	/**
	 * Set the CalculationResult property.
	 */
	public void setCalculationResult (java.util.Vector newList) {

		if (newList == null) {
			_CalculationResult.removeAllElements();
		} else {
			_CalculationResult = (java.util.Vector)newList.clone();
		}
	}


	public void addCalculationResult (CalculationResult obj) {
		if (obj == null) {
			return;
		}

		_CalculationResult.addElement(obj);
	}


	public void setCalculationResultAt (CalculationResult obj, int index)
			throws IndexOutOfBoundsException {
		if (obj == null) {
			return;
		}

		_CalculationResult.setElementAt(obj, index);
	}


	public void removeCalculationResult (CalculationResult obj) {
		if (obj == null) {
			return;
		}

		_CalculationResult.removeElement(obj);
	}


	public void removeCalculationResultAt (int index)
			throws IndexOutOfBoundsException {
		_CalculationResult.removeElementAt(index);
	}


	private void setCalculationResult (XmlElement xml) {

		_CalculationResult.removeAllElements();
		XmlElement saved_xml = xml;

		while (xml != null &&
			CalculationResult.matches(xml, this)) {
			Object obj = new CalculationResult(xml, this);
			_CalculationResult.addElement(obj);
			saved_xml.setLastProcessed(xml);
			xml = xml.next();
		}
	}


	/**
	 * Get the CalcResultCode property.
	 */
	public long getCalcResultCode () {
		if (_has_CalcResultCode_) {
			return (_CalcResultCode);
		}

		return (-1L);
	}


	/**
	 * Set the CalcResultCode property.
	 */
	public void setCalcResultCode (long new_value) {
		_CalcResultCode = new_value;
		_has_CalcResultCode_ = true;
		_format_errors.remove("NbaCalculation.CalcResultCode");
	}


	public void setCalcResultCode (String new_value) {

		if (new_value == null) {
			_CalcResultCode = -1L;
			_has_CalcResultCode_ = false;
			return;
		}

		try {
			_CalcResultCode = Long.parseLong(new_value);
			_has_CalcResultCode_ = true;
			_format_errors.remove("NbaCalculation.CalcResultCode");
		} catch (NumberFormatException nfe) {
			_has_CalcResultCode_ = false;
			XmlValidationError.addValidityFormatError(
				_format_errors, "NbaCalculation.CalcResultCode", "Attribute",
				"NbaCalculation/calcResultCode", new_value);
		}
	}


	/**
	 * Checks for whether CalcResultCode is set or not.
	 *
	 * @return true if CalcResultCode is set, false if not
	 */
	public boolean hasCalcResultCode () {
		return (_has_CalcResultCode_);
	}


	/**
	 * Discards CalcResultCode's value.
	 */
	public void deleteCalcResultCode () {
		_has_CalcResultCode_ = false;
		_format_errors.remove("NbaCalculation.CalcResultCode");
	}


	protected String _node_name_ = $NBA_CALCULATION;

	/**
	 * Get the XML tag name for this instance.
	 */
	public String getXmlTagName () {
		return (_node_name_);
	}


	/**
	 * Set the XML tag name for this instance.
	 */
	public void setXmlTagName (String node_name) {
		_node_name_ = node_name;
	}


	/**
	 * Gets the XML tag name for this class.
	 */
	public static String getClassXmlTagName () {
		return ($NBA_CALCULATION);
	}


	/**
	 * Keeps track of format errors that are
	 * thrown in the numeric setXXX() methods().
	 */
	protected java.util.Hashtable _format_errors =
		new java.util.Hashtable();


	/**
	 * This flag is used to used to check whether
	 * the validators have been created.
	 */
	transient protected static boolean _validators_created = false;

	/*
	 * XML Validators
	 */
	transient protected static XmlValidator 
		_CalculationResult_validator_ = null;
	transient protected static XmlIntegerValidator
		_CalcResultCode_validator_ = null;

	/**
	 * Create the validators for this class.
	 */
	protected static synchronized void createValidators () {

		if (_validators_created) {
			return;
		}

		_CalculationResult_validator_ = new XmlValidator(
			"NbaCalculation.CalculationResult", "Element", 
			"NbaCalculation/CalculationResult", 0, -1);

		_CalcResultCode_validator_ = new XmlIntegerValidator(
			"NbaCalculation.CalcResultCode", "Attribute",
			"NbaCalculation/calcResultCode",
			0L, XmlValidator.NOT_USED,
			0L, XmlValidator.NOT_USED, 0, 1);

		_validators_created = true;
	}


	/**
	 * Checks this object to see if it will produce valid XML.
	 */
	public boolean isValid () {

		if (!(this instanceof Validateable)) {
			return (true);
		}

		java.util.Vector errors = getValidationErrors(true);
		if (errors == null || errors.size() < 1) {
			return (true);
		}

		return (false);
	}


	/**
	 * Checks each field on the object for validity and
	 * returns a Vector holding the validation errors.
	 */
	public java.util.Vector getValidationErrors () {
		return (getValidationErrors(false));
	}


	/**
	 * Checks each field on the object for validity and
	 * returns a java.util.Vector holding the validation errors.
	 *
	 * @return  a Vector containing the validation errors
	 */
	public java.util.Vector getValidationErrors (boolean return_on_error) {
		return (getValidationErrors(return_on_error, true));
	}


	/**
	 * Checks each field on the object for validity and
	 * returns a Vector holding the validation errors.
	 *
	 * @return  a Vector containing the validation errors
	 */
	public java.util.Vector getValidationErrors (
		boolean return_on_error, boolean traverse) {

		createValidators();

		java.util.Vector errors;
		if (_unexpected_xml_errors_ != null &&
				_unexpected_xml_errors_.size() > 0) {
			errors = (java.util.Vector)_unexpected_xml_errors_.clone();
			if (return_on_error) {
				return (errors);
			}
		} else {
			errors = new java.util.Vector(4, 4);
		}

		XmlValidationError e;
		e = _CalcResultCode_validator_.validate(
			_CalcResultCode,
			_has_CalcResultCode_, _format_errors);
		if (e != null) {
			errors.addElement(e);
			if (return_on_error) {
				return (errors);
			}
		}


		if (!traverse) {
			if (errors.size() < 1) {
				return (null);
			}

			return (errors);
		}


		boolean is_valid;

		is_valid = _CalculationResult_validator_.isValid(
			_CalculationResult,
			errors, return_on_error, traverse);
		if (!is_valid && return_on_error) {
			return (errors);
		}



		if (errors.size() < 1) {
			return (null);
		}

		return (errors);
	}


	/**
	 * Checks the XML to see whether it matches the
	 * XML contents of this class.
	 */
	public static boolean matches (XmlElement xml, XmlObject parent) {

		if (xml == null) {
			return (false);
		}

		return (xml.matches($NBA_CALCULATION, nsm, parent));
	}


	/**
	 * This method unmarshals an XML document instance
	 * into an instance of this class.
	 */
	public static NbaCalculation unmarshal (
			InputStream in) throws Exception {

		NbaCalculation obj = new NbaCalculation();
		ObjectFactory.unmarshal(obj, in);
		return (obj);
	}


	/**
	 * Populates this object with the values from the 
	 * parsed XML.
	 * @deprecated  will be removed in a future release.
	 * Use {@link #unmarshal(XmlElement)}.
	 */
	public void fromXml (XmlElement xml) {
		unmarshal(xml);
	}


	/**
	 * Populates this object with the values from the 
	 * parsed XML.
	 *
	 * @since 2.5
	 */
	public void unmarshal (XmlElement xml) {

		if (xml == null) {
			return;
		}

		if (!xml.matches($NBA_CALCULATION, this)) {
			return;
		}

		java.util.Vector doc_namespaces = xml.getDeclaredNamespaces();
		if (doc_namespaces != null) {
			_doc_declared_namespaces_ = 
				(java.util.Vector)doc_namespaces.clone();
		}

		unmarshalAttributes(xml);

		/*
		 * Get the contained XmlElement, this is what we process
		 */
		xml = xml.getChildAt(0);
		if (xml == null) {
			return;
		}

		if (xml.matches($CALCULATION_RESULT,
			CalculationResult.nsm, this)) {

			setCalculationResult(xml);
			xml = xml.next();
			if (xml == null) {
				return;
			}
		}


		if (xml != null) {

			_unexpected_xml_errors_ =
				XmlValidationError.addUnexpectedXmlError(
					this, _unexpected_xml_errors_, xml);
		}
	}


	/**
	 * Unmarshal any attributes.
	 *
	 * @param xml the XmlElement holding the parsed XML
	 * @since 2.5
	 */
	protected void unmarshalAttributes (XmlElement xml) {

		/*
		 * Set the attribute based field(s)
		 */
		setCalcResultCode(xml.getAttribute($CALC_RESULT_CODE, this));
	}


	/**
	 * Writes this instance to a stream. 
	 *
	 * @param  stream  the OutputStream to write the XML object to
	 * @deprecated  This method will be removed in a future release.
	 * Use {@link #marshal(XmlOutputStream)} or {@link #marshal(OutputStream)}.
	 */
	public void toXml (OutputStream stream) {
		marshal(stream);
	}


	/**
	 * Writes this instance to a stream. 
	 *
	 * @param  stream  the OutputStream to write the XML object to
	 * @param  embed_files  set to true to embed files in the XML
	 * @deprecated  This method will be removed in a future release.
	 * Use {@link #marshal(XmlOutputStream)} or {@link #marshal(OutputStream)}.
	 */
	public void toXml (OutputStream stream, boolean embed_files) {

		XmlOutputStream out = new FormattedOutputStream(stream);
		out.setEmbedFiles(embed_files);
		marshal(out);
	}


	/**
	 * Writes this instance to a stream. 
	 *
	 * @param  stream  the OutputStream to write the XML object to
	 * @param  embed_files  set to true to embed files in the XML
	 * @deprecated  This method will be removed in a future release.
	 * Use {@link #marshal(XmlOutputStream)} or {@link #marshal(OutputStream)}.
	 */
	public void toXml (
			OutputStream stream, String indent, boolean embed_files)	{

		FormattedOutputStream out = new FormattedOutputStream(stream);
		out.setIndentString(indent);
		out.setEmbedFiles(embed_files);
		marshal(out);
	}


	/**
	 * Writes this instance to a stream. If the OutputStream is not an
	 * instance of XmlOutputStream then a FormattedOutputStream
	 * will be created which wraps the OutputStream.
	 *
	 * @param  stream  the OutputStream to write the XML object to
	 * @see #marshal(XmlOutputStream)
	 * @since 2.5
	 */
	public void marshal (OutputStream stream) {

		XmlOutputStream out = new FormattedOutputStream(stream);
		marshal(out);
	}


	/**
	 * Writes this instance to an XmlOutputStream.
	 *
	 * @param  out  the XmlOutputStream to write the XML object to
	 * @see #marshal(OutputStream)
	 * @since 2.5
	 */
	public void marshal (XmlOutputStream out) {

		XmlAttributeList attrs = new XmlAttributeList(nsm);
		attrs = marshalAttributes(attrs);
		out.pushScope();
		out.writeStartTag(getXmlTagName(), attrs, false);
		out.incrementIndent();

		out.write(null,
			getCalculationResult());

		out.decrementIndent();
		out.writeEndTag(getXmlTagName());
		out.popScope();
	}


	/**
	 * Get the XmlAttributeList for marshalling.
	 *
	 * @param attrs  the currently populated XmlAttributeList.
	 * @return  a populated XmlAttributeList
	 * @since 2.5
	 */
	protected XmlAttributeList marshalAttributes (XmlAttributeList attrs) {

		if (attrs == null) {
			attrs = new XmlAttributeList();
		}

		attrs.add($CALC_RESULT_CODE, _CalcResultCode, _has_CalcResultCode_);

		return (attrs);
	}


	/**
	 * Get this object's parent object.
	 */
	public XmlObject get$Parent () {
		return (_parent_);
	}


	/**
	 * Set this object's parent object.
	 */
	public void set$Parent (XmlObject parent) {
		_parent_ = parent;
	}


	/**
	 * The default <code>XmlNamespaceManager</code> for this class.
	 * @since 2.5
	 */
	public static XmlNamespaceManager nsm = null;


	/**
	 * Get the <code>XmlNamespaceManager</code> for this class.
	 * This will be null if no namespaces on this class or if
	 * namespace support is disabled during code generation.
	 *
	 * @since 2.5
	 */
	public XmlNamespaceManager get$NamespaceManager () {
		return (nsm);
	}


	/**
	 * Storage for namespaces declared in the input document.
	 * @since 2.5
	 */
	protected java.util.Vector _doc_declared_namespaces_ = null;


	/**
	 * Get the Vector holding the namespaces declared in the element
	 * that this instance was unmarshalled from.
	 *
	 * @since 2.5
	 */
	public java.util.Vector get$DocumentNamespaces () {
		return (_doc_declared_namespaces_);
	}
}
