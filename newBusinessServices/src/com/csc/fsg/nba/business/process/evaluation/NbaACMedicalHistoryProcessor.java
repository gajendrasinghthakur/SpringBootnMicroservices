package com.csc.fsg.nba.business.process.evaluation;

/*
 * **************************************************************************<BR>
 * This program contains trade secrets and confidential information which<BR>
 * are proprietary to CSC Financial Services Group®.  The use,<BR>
 * reproduction, distribution or disclosure of this program, in whole or in<BR>
 * part, without the express written permission of CSC Financial Services<BR>
 * Group is prohibited.  This program is also an unpublished work protected<BR>
 * under the copyright laws of the United States of America and other<BR>
 * countries.  If this program becomes published, the following notice shall<BR>
 * apply:
 *     Property of Computer Sciences Corporation.<BR>
 *     Confidential. Not for publication.<BR>
 *     Copyright (c) 2002-2008 Computer Sciences Corporation. All Rights Reserved.<BR>
 * **************************************************************************<BR>
 */

import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.csc.dip.jvpms.runtime.base.VpmsComputeResult;
import com.csc.fsg.nba.datamanipulation.NbaOinkDataAccess;
import com.csc.fsg.nba.datamanipulation.NbaOinkRequest;
import com.csc.fsg.nba.exception.NbaBaseException;
import com.csc.fsg.nba.exception.NbaVpmsException;
import com.csc.fsg.nba.foundation.NbaConstants;
import com.csc.fsg.nba.foundation.NbaUtils;
import com.csc.fsg.nba.vo.NbaAcdb;
import com.csc.fsg.nba.vo.txlife.OLifE;
import com.csc.fsg.nba.vo.txlife.Party;
import com.csc.fsg.nba.vo.txlife.Risk;
import com.csc.fsg.nba.vpms.NbaVpmsAdaptor;
import com.csc.fsg.nba.vpms.NbaVpmsConstants;
import com.csc.fsg.nba.vpms.NbaVpmsModelResult;
import com.csc.fsg.nba.vpms.NbaVpmsResultsData;
import com.csc.fsg.nba.vpms.results.VpmsModelResult;

/**
 * Class that will take care of the processing once ACMedicalHistory model is invoked 
 * from NBCTEVAL and NBRQEVAL process.
 * <p>Implements NbaVpmsModelProcessor 
 * <p>
 * <b>Modifications:</b><br>
 * <table border=0 cellspacing=5 cellpadding=5>
 * <thead>
 * <th align=left>Project</th><th align=left>Release</th><th align=left>Description</th>
 * </thead>
 * <tr><td>ACP007</td><td>Version 4</td><td>Medical Screening</td></tr>
 * <tr><td>ACN024</td><td>Version 4</td><td>CTEVAL/RQEVAL restructuring</td></tr>
 * <tr><td>ACN016</td><td>Version 4</td><td>PnR MB2</td></tr>
 * <tr><td>SPR2652</td><td>Version 5</td><td>APCTEVAL process getting error stopped with Run time error occured message</td><tr>
 * <tr><td>SPR2639</td><td>Version 5</td><td>Automated process status should be based business function</td></tr>
 * <tr><td>SPR3329</td><td>Version 7</td><td>Prevent erroneous "Retrieve variable name is invalid" messages from being generated by OINK</td></tr>
 * <tr><td>SPR3362</td><td>Version 7</td><td>Exceptions in Automated Processes and Logon Service Due to VP/MS Memory Leak</td></tr>
 * <tr><td>SPR3290</td><td>Version 7</td><td>General source code clean up during version 7<td><tr> 
 * <tr><td>SPR3586</td><td>AXALife Phase 1</td><td>No Impairments are Generated by nbA AC Requirement Evaluation Lab Result Processing for Abnormal Test Results from 1122 XML</td></tr>
 * </table>
 * <p>
 * @author CSC FSG Developer
 * @version 7.0.0
 * @since New Business Accelerator - Version 4
 */

public class NbaACMedicalHistoryProcessor extends NbaVpmsModelProcessor {

	protected ArrayList medicalHistoryImpairments = new ArrayList();//ACN024
	protected ArrayList medicalHistoryAccepImpairments = null;

	/**
	 * Overridden method, calls the model and 
	 * updates the contract with impairments.
	 * @throws NbaBaseException
	 */
	public void execute() throws NbaBaseException {
		boolean isSuccess = false;
		impSrc = NbaConstants.MEDICALHISTORY_SRC; //ACN016
		if (performingContractEvaluation()) { //SPR2652
			int partyIndex = 0;
			List al = getAllInsuredIndexes(); // SPR3290
			OLifE oLifE = nbaTxLife.getOLifE();
			int insListCount = al.size();
			// SPR3290 code deleted
			String partyId = "";
			for(int i=0;i<insListCount;i++){
				partyIndex = ((Integer)al.get(i)).intValue();
				partyId = oLifE.getPartyAt(partyIndex).getId();
				partyID = partyId;
				int medCondCount = getMedicalConditionCount(oLifE, partyIndex);
				for(int mIndex=0; mIndex<medCondCount; mIndex++) {
					medicalHistoryImpairments = new ArrayList();							
					isSuccess = callMedicalHistoryModel(partyId, i, mIndex);
					if (!isSuccess){
						throw new NbaVpmsException(NbaVpmsException.VPMS_RESULTS_ERROR + NbaVpmsAdaptor.ACMEDICALHISTORY);	//SPR2652
					}
					getContractImpairments(partyId);
					ArrayList[] mergedLists = mergeImpairments(contractImpairments, medicalHistoryImpairments, new ArrayList(), new ArrayList());
					ArrayList arrMerged = mergedLists[0];
					addImpairmentInfo(partyId, arrMerged);						
				}
			}
		}
		else if (performingRequirementsEvaluation()) { //SPR2652
			setPartyID(work); //ACN024
			OLifE oLifE = txLifeReqResult.getOLifE();				
			int medCondCount = getMedicalConditionCount(oLifE, 0);				
			for(int mIndex=0; mIndex<medCondCount; mIndex++) {
				isSuccess = callMedicalHistoryModelForReqEval(mIndex);
				if(!isSuccess){
					throw new NbaVpmsException(NbaVpmsException.VPMS_RESULTS_ERROR + NbaVpmsAdaptor.ACMEDICALHISTORY);	//SPR2652
				}
				//Do the Impairments Merging //ACN024
				mergeImpairmentsAndAccep(medicalHistoryImpairments,medicalHistoryAccepImpairments); //ACN016			
			}				
		}		
	}
	/**
	 * This function acts as an entry point for calling the AcMedicalHistory model from RequirmentEvaluation automated Process.	 
	 * @param medConditionIndex: medical Condition Index of the insured
	 * @return boolean : Returns true if the call is successful
	 * 					 Else returns false 	
	 * @throws NbaBaseException
	 */
	public boolean callMedicalHistoryModelForReqEval(int medConditionIndex) throws NbaBaseException {
		boolean success = false;
		NbaVpmsAdaptor vpmsProxy = null; //SPR3362
		try {
			NbaOinkDataAccess oinkData = new NbaOinkDataAccess(txLifeReqResult); //ACN009
			oinkData.setAcdbSource(new NbaAcdb(), nbaTxLife);
			oinkData.setLobSource(work.getNbaLob());
			//SPR3586 code deleted
			if(getLogger().isDebugEnabled()) { //SPR3290
			    getLogger().logDebug("########### Testing Medical History ###########");
			} //SPR3290
			vpmsProxy = new NbaVpmsAdaptor(oinkData, NbaVpmsAdaptor.ACMEDICALHISTORY); //SPR3362
			vpmsProxy.setVpmsEntryPoint(NbaVpmsAdaptor.EP_RESULT);
			NbaOinkRequest oinkRequest = new NbaOinkRequest();
			Object[] args = getKeys();
			oinkRequest.setRequirementIdFilter(reqId);
			oinkRequest.setMedConditionFilter(medConditionIndex);
			oinkRequest.setArgs(args);

			Map deOink = new HashMap();
			//			######## DEOINK
			deOink.put(NbaVpmsConstants.A_PROCESS_ID, NbaUtils.getBusinessProcessId(getUser())); //SPR2639
			deOinkContractFieldsForRequirement(deOink);
			deOinkMedicalTreatmentFields(oinkData, oinkRequest, deOink);
			deOinkMedicalPreventionFields(oinkData, oinkRequest, deOink);
			deOinkUFSFields(oinkData, oinkRequest, deOink);
			
			vpmsProxy.setANbaOinkRequest(oinkRequest);
			vpmsProxy.setSkipAttributesMap(deOink);
			VpmsComputeResult vcr = vpmsProxy.getResults();
			NbaVpmsResultsData vpmsResultsData = new NbaVpmsResultsData(vcr);
			ArrayList results = vpmsResultsData.getResultsData();
			results = vpmsResultsData.getResultsData();
			//Resulting string will be the zeroth element.
			if (results == null) {
				//SPR3362 code deleted
				throw new NbaVpmsException(NbaVpmsException.VPMS_NO_RESULTS + NbaVpmsAdaptor.ACMEDICALHISTORY); //SPR2652
			} //SPR2652
			vpmsResult = (String)results.get(0);
			NbaVpmsModelResult vpmsOutput = new NbaVpmsModelResult(vpmsResult);
			VpmsModelResult vpmModelResult = vpmsOutput.getVpmsModelResult();
			medicalHistoryImpairments = vpmModelResult.getImpairmentInfo();
			success = true;
			// SPR2652 Code Deleted
			//SPR3362 code deleted
		} catch (RemoteException re) {
			handleRemoteException(re, NbaVpmsAdaptor.ACMEDICALHISTORY); //SPR2652
		// SPR2652 Code Deleted
		//begin SPR3362
		} finally {
		    if(vpmsProxy != null){
		        try {
                    vpmsProxy.remove();
                } catch (RemoteException e) {
                    getLogger().logError(NbaBaseException.VPMS_REMOVAL_FAILED);
                }
		    }
		//end SPR3362
		}
		return success;
	}
	
	/**
	 * This function acts as an entry point for calling the ACMedicalHistory model from ContractEvaluation automated process.
	 * @param partyId: partyId of the insured
	 * @param insuredIndex: Index of the insured
	 * @param medConditionIndex: medical Condition Index of the insured
	 * @return boolean : Returns true if the call is successful
	 * 					 Else returns false 	
	 * @throws NbaBaseException
	 */
	private boolean callMedicalHistoryModel(String partyId, int insuredIndex, int medConditionIndex) throws NbaBaseException {
		boolean success = false;	 //SPR2652
		ArrayList results = null;
		partyID = partyId; //SPR2652
		NbaOinkRequest oinkRequest = new NbaOinkRequest();//SPR2652
		if (updatePartyFilterInRequest(oinkRequest, partyId)) { //SPR2652
			NbaOinkDataAccess oinkData = new NbaOinkDataAccess(nbaTxLife);
			oinkData.setAcdbSource(new NbaAcdb(), nbaTxLife);
			oinkData.setLobSource(work.getNbaLob());
			oinkData.setContractSource(nbaTxLife);//SPR3329
			NbaVpmsAdaptor vpmsProxy = new NbaVpmsAdaptor(oinkData,NbaVpmsAdaptor.ACMEDICALHISTORY);//SPR2652
			vpmsProxy.setVpmsEntryPoint(NbaVpmsAdaptor.EP_RESULT);//SPR2652

			oinkRequest.setMedConditionFilter(medConditionIndex);
			oinkRequest.setArgs(getKeys());

			Map deOink = new HashMap();
			deOinkMedicalTreatmentFields(oinkData, oinkRequest, deOink);
			deOinkMedicalPreventionFields(oinkData, oinkRequest, deOink);
			deOinkUFSFields(oinkData, oinkRequest, deOink);
	
			vpmsProxy.setANbaOinkRequest(oinkRequest);
			vpmsProxy.setSkipAttributesMap(deOink);
			VpmsComputeResult vcr;
			try {
				vcr = vpmsProxy.getResults();
				NbaVpmsResultsData vpmsResultsData = new NbaVpmsResultsData(vcr);
				results = vpmsResultsData.getResultsData();
				if (results == null) {
					//SPR3362 code deleted
					throw new NbaVpmsException(NbaVpmsException.VPMS_NO_RESULTS + NbaVpmsAdaptor.ACMEDICALHISTORY); //SPR2652 
				}
				//SPR2652 Code Deleted
				vpmsResult = ((String)results.get(0));
				NbaVpmsModelResult vpmsOutput = new NbaVpmsModelResult(vpmsResult);
				VpmsModelResult vpmModelResult = vpmsOutput.getVpmsModelResult();
				ArrayList impList = vpmModelResult.getImpairmentInfo();
				if(impList!=null && impList.size() != 0){
					medicalHistoryImpairments.addAll(impList);
				}
				success = true;
				// SPR2652 Code Deleted
				//SPR3362 code deleted
			} catch (RemoteException re) {
				handleRemoteException(re, NbaVpmsAdaptor.ACMEDICALHISTORY); //SPR2652
				// SPR2652 Code Deleted
			//begin SPR3362
			} finally {
			    if(vpmsProxy != null){
			        try {
	                    vpmsProxy.remove();
	                } catch (RemoteException e) {
	                    getLogger().logError(NbaBaseException.VPMS_REMOVAL_FAILED);
	                }
			    }
			//end SPR3362
			}
		}
		return success;
	}

	private void deOinkMedicalTreatmentFields(NbaOinkDataAccess oinkData, NbaOinkRequest oinkRequest, Map deOink) throws NbaBaseException {
		String oinkVarName = "TreatmentType_INS";
		oinkRequest.setVariable(oinkVarName);
		String[] value = oinkData.getStringValuesFor(oinkRequest);
		deOink.put("A_no_of_TreatmentType", String.valueOf(value.length));
		for (int j =0; j<value.length; j++) {
			if (j==0) deOink.put("A_"+oinkVarName, value[j]);
			else deOink.put("A_"+oinkVarName+"["+j+"]", value[j]);
		}
		
		oinkVarName = "TreatmentAmt_INS";
		oinkRequest.setVariable(oinkVarName);
		value = oinkData.getStringValuesFor(oinkRequest);
		for (int j =0; j<value.length; j++) {
			if (j==0) deOink.put("A_"+oinkVarName, value[j]);
			else deOink.put("A_"+oinkVarName+"["+j+"]", value[j]);
		}

		oinkVarName = "TreatmentFrequencyMode_INS";
		oinkRequest.setVariable(oinkVarName);
		value = oinkData.getStringValuesFor(oinkRequest);
		for (int j =0; j<value.length; j++) {
			if (j==0) deOink.put("A_"+oinkVarName, value[j]);
			else deOink.put("A_"+oinkVarName+"["+j+"]", value[j]);
		}
			
		oinkVarName = "TreatmentStartDate_INS";
		oinkRequest.setVariable(oinkVarName);
		value = oinkData.getStringValuesFor(oinkRequest);
		for (int j =0; j<value.length; j++) {
			if (j==0) deOink.put("A_"+oinkVarName, value[j]);
			else deOink.put("A_"+oinkVarName+"["+j+"]", value[j]);
		}

		oinkVarName = "Medication_INS";
		oinkRequest.setVariable(oinkVarName);
		value = oinkData.getStringValuesFor(oinkRequest);
		for (int j =0; j<value.length; j++) {
			if (j==0) deOink.put("A_"+oinkVarName, value[j]);
			else deOink.put("A_"+oinkVarName+"["+j+"]", value[j]);
		}

		oinkVarName = "DateLastSeen_INS";
		oinkRequest.setVariable(oinkVarName);
		value = oinkData.getStringValuesFor(oinkRequest);
		for (int j =0; j<value.length; j++) {
			if (j==0) deOink.put("A_"+oinkVarName, value[j]);
			else deOink.put("A_"+oinkVarName+"["+j+"]", value[j]);
		}
	}

	private void deOinkMedicalPreventionFields(NbaOinkDataAccess oinkData, NbaOinkRequest oinkRequest, Map deOink) throws NbaBaseException {
		String oinkVarName = "TestType_INS";
		oinkRequest.setVariable(oinkVarName);
		String[] value = oinkData.getStringValuesFor(oinkRequest);
		deOink.put("A_no_of_TestType", String.valueOf(value.length));
		for (int j =0; j<value.length; j++) {
			if (j==0) deOink.put("A_"+oinkVarName, value[j]);
			else deOink.put("A_"+oinkVarName+"["+j+"]", value[j]);
		}
		
		oinkVarName = "TestDate_INS";
		oinkRequest.setVariable(oinkVarName);
		value = oinkData.getStringValuesFor(oinkRequest);
		for (int j =0; j<value.length; j++) {
			if (j==0) deOink.put("A_"+oinkVarName, value[j]);
			else deOink.put("A_"+oinkVarName+"["+j+"]", value[j]);
		}
	}
	
	private int getMedicalConditionCount(OLifE oLifE, int partyIndex) {
		Party party = oLifE.getPartyAt(partyIndex);
		Risk risk = null;
		if(party != null) {
			risk = party.getRisk();
		}
		if(risk != null) {
			return risk.getMedicalConditionCount();
		}
		return 0;
	}
}
