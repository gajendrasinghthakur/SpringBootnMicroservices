package com.csc.fsg.nba.business.process.evaluation;

/*
 * **************************************************************************<BR>
 * This program contains trade secrets and confidential information which<BR>
 * are proprietary to CSC Financial Services Group®.  The use,<BR>
 * reproduction, distribution or disclosure of this program, in whole or in<BR>
 * part, without the express written permission of CSC Financial Services<BR>
 * Group is prohibited.  This program is also an unpublished work protected<BR>
 * under the copyright laws of the United States of America and other<BR>
 * countries.  If this program becomes published, the following notice shall<BR>
 * apply:
 *     Property of Computer Sciences Corporation.<BR>
 *     Confidential. Not for publication.<BR>
 *     Copyright (c) 2002-2008 Computer Sciences Corporation. All Rights Reserved.<BR>
 * **************************************************************************<BR>
 */

import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

import com.csc.fsg.nba.datamanipulation.NbaOinkDataAccess;
import com.csc.fsg.nba.datamanipulation.NbaOinkRequest;
import com.csc.fsg.nba.exception.NbaBaseException;
import com.csc.fsg.nba.exception.NbaVpmsException;
import com.csc.fsg.nba.foundation.NbaConstants;
import com.csc.fsg.nba.vo.NbaAcdb;
import com.csc.fsg.nba.vo.txlife.ImpairmentInfo;
import com.csc.fsg.nba.vo.txlife.OLifE;
import com.csc.fsg.nba.vpms.NbaVpmsAdaptor;
import com.csc.fsg.nba.vpms.NbaVpmsModelResult;
import com.csc.fsg.nba.vpms.NbaVpmsResultsData;
import com.csc.fsg.nba.vpms.results.VpmsModelResult;

/**
 * Class that will take care of the processing once ACProfile model is invoked 
 * from NBCTEVAL and NBRQEVAL process.
 * <p>Implements NbaVpmsModelProcessor 
 * <p>
 * <b>Modifications:</b><br>
 * <table border=0 cellspacing=5 cellpadding=5>
 * <thead>
 *   <th align=left>Project</th><th align=left>Release</th><th align=left>Description</th>
 * </thead>
 * <tr><td>ACP015</td><td>Version 4</td><td>Profile</td></tr>
 * <tr><td>ACN016</td><td>Version 4</td><td>PnR MB2</td></tr>
 * <tr><td>SPR2652</td><td>Version 5</td><td>APCTEVAL process getting error stopped with Run time error occured message</td><tr>
 * <tr><td>SPR3329</td><td>Version 7</td><td>Prevent erroneous "Retrieve variable name is invalid" messages from being generated by OINK</td></tr>
 * <tr><td>SPR3362</td><td>Version 7</td><td>Exceptions in Automated Processes and Logon Service Due to VP/MS Memory Leak</td></tr>
 * <tr><td>SPR3290</td><td>Version 7</td><td>General source code clean up during version 7</td></tr>
 * </table>
 * <p>
 * @author CSC FSG Developer
 * @version 7.0.0
 * @since New Business Accelerator - Version 4
 */
public class NbaACProfileProcessor extends NbaVpmsModelProcessor {
	protected ArrayList profileScore =new ArrayList();
	/**
	 * Overridden method, calls the model and 
	 * updates the contract with profile Score.
	 * @throws NbaBaseException
	 */
	public void execute() throws NbaBaseException {
		boolean isSuccess = false;
		impSrc = NbaConstants.PROFILE_SRC; //ACN016
		
		if (performingContractEvaluation()) { //SPR2652
			int partyIndex = 0;
			ArrayList al = getAllInsuredIndexes();
			OLifE oLifE = nbaTxLife.getOLifE();
			int insuredCount = al.size();
			for(int i=0;i<insuredCount;i++){
				partyIndex = ((Integer)al.get(i)).intValue();
				String partyId = oLifE.getPartyAt(partyIndex).getId();
				partyID = partyId;
				profileScore.clear();
				isSuccess = callProfileModel(partyIndex,i);														
				if (!isSuccess){
					throw new NbaVpmsException(NbaVpmsException.VPMS_RESULTS_ERROR + NbaVpmsAdaptor.ACPROFILE);	//SPR2652
				}
				addProfileInfo(partyId, profileScore);	
			}
		}
		else if (performingRequirementsEvaluation()) { //SPR2652
			setPartyID(work); 
			isSuccess = callProfileModel();
			if (!isSuccess) {
				throw new NbaVpmsException(NbaVpmsException.VPMS_RESULTS_ERROR + NbaVpmsAdaptor.ACPROFILE);	//SPR2652 
			}
			addProfileInfo(profileScore);
		}
	}
	/**
	 * This method is used to call the ACProfile model	 
	 * @param 
	 * @return boolean : Returns true if the call is successful
	 * 					 Else returns false 	
	 * @throws NbaBaseException
	 */
	//ACP015 New Method	
	public boolean callProfileModel(int partyIndex, int insuredIndex) throws NbaBaseException {
		NbaOinkRequest oinkRequest = new NbaOinkRequest(); //SPR2652
		boolean success = false;
		if (updatePartyFilterInRequest(oinkRequest, partyID)) { //SPR2652
			VpmsModelResult vpmsModelResult = null; //SPR2652
			HashMap deOInkMap = new HashMap();
			// SPR3290 code deleted
			NbaVpmsAdaptor vpmsProxy = null; //SPR3362
			try {
				NbaOinkDataAccess accessContract = new NbaOinkDataAccess(nbaTxLife);
				accessContract.setLobSource(work.getNbaLob());				
				// SPR2652 code deleted
				accessContract.setAcdbSource(new NbaAcdb(), nbaTxLife);
				accessContract.setContractSource(nbaTxLife);//SPR3329
				vpmsProxy = new NbaVpmsAdaptor(accessContract, NbaVpmsAdaptor.ACPROFILE); //SPR3362
				vpmsProxy.setVpmsEntryPoint(NbaVpmsAdaptor.EP_RESULT);
				Object[] args = getKeys();
				oinkRequest.setArgs(args);
				vpmsProxy.setANbaOinkRequest(oinkRequest);
				getProfileDeOINKValues(deOInkMap, partyIndex, insuredIndex);
				deOinkImpairmentData(deOInkMap);
				vpmsProxy.setSkipAttributesMap(deOInkMap);
				NbaVpmsResultsData vpmsResultsData;
				vpmsResultsData = new NbaVpmsResultsData(vpmsProxy.getResults());
				vpmsResultsData.displayResultsData();
				if (vpmsResultsData == null) {
					//SPR3362 code deleted
					throw new NbaVpmsException(NbaVpmsException.VPMS_NO_RESULTS + NbaVpmsAdaptor.ACPROFILE); //SPR2652
				} //SPR2652
				String xmlString = (String) vpmsResultsData.getResultsData().get(0);
				if (getLogger().isDebugEnabled()) {
					getLogger().logDebug(vpmsResult);
				}
				NbaVpmsModelResult nbaVpmsModelResult = new NbaVpmsModelResult(xmlString);
				vpmsModelResult = nbaVpmsModelResult.getVpmsModelResult();
				profileScore = vpmsModelResult.getProfileInfo();
				success = true;
				// SPR2652 code deleted
				//SPR3362 code deleted
				// SPR2652 code deleted
			} catch (RemoteException e) { //SPR2652
				handleRemoteException(e, NbaVpmsAdaptor.ACPROFILE); //SPR2652
			//begin SPR3362
			} finally {
			    if(vpmsProxy != null){
			        try {
	                    vpmsProxy.remove();
	                } catch (RemoteException e) {
	                    getLogger().logError(NbaBaseException.VPMS_REMOVAL_FAILED);
	                }
			    }
			//end SPR3362
			}
		}
		return success;
	}
	
	/**
	 * This method is used to call the ACProfile model	 
	 * @param 
	 * @return boolean : Returns true if the call is successful
	 * 					 Else returns false 	
	 * @throws NbaBaseException
	 */
	//ACP015 New Method	
	public boolean callProfileModel() throws NbaBaseException {
		VpmsModelResult vpmsModelResult = null;
		boolean success = false;
		HashMap deOInkMap = new HashMap();
		// SPR3290 code deleted
		NbaVpmsAdaptor vpmsProxy = null; //SPR3362
		try {
			NbaOinkDataAccess accessContract =	new NbaOinkDataAccess(txLifeReqResult);
			accessContract.setLobSource(work.getNbaLob());
			NbaOinkRequest oinkRequest = new NbaOinkRequest();
			accessContract.setAcdbSource(new NbaAcdb(), nbaTxLife);
			accessContract.setContractSource(nbaTxLife);//SPR3329
			vpmsProxy = new NbaVpmsAdaptor(accessContract, NbaVpmsAdaptor.ACPROFILE); //SPR3362
			vpmsProxy.setVpmsEntryPoint(NbaVpmsAdaptor.EP_RESULT);
			Object [] args = getKeys();
			oinkRequest.setArgs(args);	
			vpmsProxy.setANbaOinkRequest(oinkRequest);
			oinkRequest.setRequirementIdFilter(reqId);
			getProfileDeOINKValues(deOInkMap);
			deOinkImpairmentData(deOInkMap);
			vpmsProxy.setSkipAttributesMap(deOInkMap);
			NbaVpmsResultsData vpmsResultsData;
			vpmsResultsData = new NbaVpmsResultsData(vpmsProxy.getResults());
			vpmsResultsData.displayResultsData();
			if (vpmsResultsData == null) {
				//SPR3362 code deleted
				throw new NbaVpmsException(NbaVpmsException.VPMS_NO_RESULTS + NbaVpmsAdaptor.ACPROFILE); //SPR2652
			} //SPR2652
			String xmlString = (String) vpmsResultsData.getResultsData().get(0);
			if (getLogger().isDebugEnabled()) { 
				getLogger().logDebug(vpmsResult);
			}				
			NbaVpmsModelResult nbaVpmsModelResult = new NbaVpmsModelResult(xmlString);
			vpmsModelResult = nbaVpmsModelResult.getVpmsModelResult();
			profileScore = vpmsModelResult.getProfileInfo();
			success = true;			
			// SPR2652 Code Deleted
			//SPR3362 code deleted
		// SPR2652 Code Deleted
		} catch (RemoteException e) {	//SPR2652
			handleRemoteException(e, NbaVpmsAdaptor.ACPROFILE); //SPR2652
		//begin SPR3362
		} finally {
		    if(vpmsProxy != null){
		        try {
                    vpmsProxy.remove();
                } catch (RemoteException e) {
                    getLogger().logError(NbaBaseException.VPMS_REMOVAL_FAILED);
                }
		    }
		//end SPR3362
		}
		return success;
	}
	
	/**
	 * This method gets all the deOink variables for ACProfile model	 
	 * @param 
	 * @return java.util.Map : The Hash Map containing all the deOink variables 	
	 * @throws NbaBaseException
	 */
	//ACP015 new method.
	public void getProfileDeOINKValues (Map deOink ,int partyIndex, int insuredIndex) throws NbaBaseException{
		NbaOinkDataAccess oinkData = new NbaOinkDataAccess(nbaTxLife);
		NbaOinkRequest oinkRequest = new NbaOinkRequest();
		if (updatePartyFilterInRequest(oinkRequest, partyID)) { //SPR2652
			// SPR3290 code deleted
			String strValue = "";
			String[] ageAtDeathList = null;
			String ageAtDeath = "";
			String[] ageIfLivingList = null;
			String ageIfLiving = "";
			String[] familyDiagnosisList = null;
			String familyDiagnosis = "";
			String[] onsetAgeList = null;
			String onsetAge = "";
			String[] roleCodeDescList = null;
			String roleCodeDesc = "";
			oinkData.setAcdbSource(new NbaAcdb(), nbaTxLife);
			oinkRequest.setArgs(getKeys());

			deOink.put("A_StressECGValue", getStressECGValue(partyIndex));
			// SPR2652 code deleted
			strValue = "AGEATDEATH_INS";
			oinkRequest.setVariable(strValue);
			ageAtDeathList = oinkData.getStringValuesFor(oinkRequest);

			strValue = "AGEIFLIVING_INS";
			oinkRequest.setVariable(strValue);
			ageIfLivingList = oinkData.getStringValuesFor(oinkRequest);

			strValue = "ONSETAGE_INS";
			oinkRequest.setVariable(strValue);
			onsetAgeList = oinkData.getStringValuesFor(oinkRequest);

			strValue = "DIAGNOSIS_INS";
			oinkRequest.setVariable(strValue);
			familyDiagnosisList = oinkData.getStringValuesFor(oinkRequest);

			strValue = "ROLECODEDESC_INS";
			oinkRequest.setVariable(strValue);
			roleCodeDescList = oinkData.getStringValuesFor(oinkRequest);

			int count = roleCodeDescList.length;
			// SPR3290 code deleted
			deOink.put("A_NO_OF_ROLECODEDESC", String.valueOf(count));
			for (int i = 0; i < count; i++) {
				ageAtDeath = ageAtDeathList[i];
				ageIfLiving = ageIfLivingList[i];
				familyDiagnosis = familyDiagnosisList[i];
				onsetAge = onsetAgeList[i];
				roleCodeDesc = roleCodeDescList[i];
				if (i == 0) {
					deOink.put("A_AGEATDEATH", ageAtDeath);
					deOink.put("A_AGEIFLIVING", ageIfLiving);
					deOink.put("A_FAMILYDIAGNOSIS", familyDiagnosis);
					deOink.put("A_ONSETAGE", onsetAge);
					deOink.put("A_ROLECODEDESC", roleCodeDesc);
				} else {
					deOink.put("A_AGEATDEATH[" + i + "]", ageAtDeath);
					deOink.put("A_AGEIFLIVING[" + i + "]", ageIfLiving);
					deOink.put("A_FAMILYDIAGNOSIS[" + i + "]", familyDiagnosis);
					deOink.put("A_ONSETAGE[" + i + "]", onsetAge);
					deOink.put("A_ROLECODEDESC[" + i + "]", roleCodeDesc);
				}
			}
		}
	}
	
	
	/**
	 * This method gets all the deOink variables for ACProfile model	 
	 * @param 
	 * @return java.util.Map : The Hash Map containing all the deOink variables 	
	 * @throws NbaBaseException
	 */
	//ACP015 new method.
	public void getProfileDeOINKValues (Map deOink) throws NbaBaseException{
		NbaOinkDataAccess oinkData = new NbaOinkDataAccess(txLifeReqResult);
		NbaOinkRequest oinkRequest = new NbaOinkRequest();
		oinkRequest.setRequirementIdFilter(reqId);
		String strValue = "";
		String[] ageAtDeathList = null;
		String ageAtDeath = "";
		String[] ageIfLivingList = null;
		String ageIfLiving = "";		
		String[] familyDiagnosisList = null;
		String familyDiagnosis = "";
		String[] onsetAgeList = null;
		String onsetAge = "";
		String[] roleCodeDescList = null;
		String roleCodeDesc = "";

		strValue = "AGEATDEATH_INS";
		oinkRequest.setVariable(strValue);
		ageAtDeathList = oinkData.getStringValuesFor(oinkRequest);
	
		strValue = "AGEIFLIVING_INS";
		oinkRequest.setVariable(strValue);
		ageIfLivingList = oinkData.getStringValuesFor(oinkRequest);
		
		strValue = "DIAGNOSIS_INS";
		oinkRequest.setVariable(strValue);
		familyDiagnosisList = oinkData.getStringValuesFor(oinkRequest);
	
		strValue = "ROLECODEDESC_INS";
		oinkRequest.setVariable(strValue);
		roleCodeDescList = oinkData.getStringValuesFor(oinkRequest);
		
		strValue = "ONSETAGE_INS";
		oinkRequest.setVariable(strValue);
		onsetAgeList = oinkData.getStringValuesFor(oinkRequest);
		
		int count = roleCodeDescList.length;
		// SPR3290 code deleted
		deOink.put("A_NO_OF_ROLECODEDESC", String.valueOf(count)) ;
		for(int i=0; i < count; i++){
			ageAtDeath = ageAtDeathList[i];
			ageIfLiving = ageIfLivingList[i];
			familyDiagnosis = familyDiagnosisList[i];
			onsetAge = onsetAgeList[i];
			roleCodeDesc =  roleCodeDescList[i];
			if(i==0){
				deOink.put("A_AGEATDEATH",ageAtDeath);
				deOink.put("A_AGEIFLIVING",ageIfLiving);
				deOink.put("A_FAMILYDIAGNOSIS",familyDiagnosis);
				deOink.put("A_ONSETAGE",onsetAge);
				deOink.put("A_ROLECODEDESC",roleCodeDesc);
			}else{
				deOink.put("A_AGEATDEATH["+ i + "]",ageAtDeath);
				deOink.put("A_AGEIFLIVING["+ i + "]",ageIfLiving);
				deOink.put("A_FAMILYDIAGNOSIS["+ i + "]",familyDiagnosis);
				deOink.put("A_ONSETAGE["+ i + "]",onsetAge);
				deOink.put("A_ROLECODEDESC["+ i + "]",roleCodeDesc);
			}
		}
	}
	
	
	public void deOinkImpairmentData(Map deOink) throws NbaBaseException{
			ArrayList impInfoList = nbaTxLife.getImpairments(partyID);
			ImpairmentInfo impInfo = null;
			for (int i = 0 ; i < impInfoList.size(); i++){
				impInfo = (ImpairmentInfo)impInfoList.get(i);
				if(i == 0){
					deOink.put("A_ImpairmentStatus_INS",convertToDefault(String.valueOf(impInfo.getImpairmentStatus())));
					deOink.put("A_ImpairmentClass_INS",convertToDefault(impInfo.getImpairmentClass()));
					deOink.put("A_ImpairmentRestrictApprovalInd_INS",convertToDefault(String.valueOf(impInfo.getRestrictApprovalInd())));//ALS3634
					deOink.put("A_ImpairmentType_INS",convertToDefault(impInfo.getImpairmentType()));
					deOink.put("A_ImpairmentPermFlatExtraAmt_INS",convertToDefault(impInfo.getImpairmentPermFlatExtraAmt()));
					deOink.put("A_ImpairmentTempFlatExtraAmt_INS",convertToDefault(impInfo.getImpairmentTempFlatExtraAmt()));
					deOink.put("A_Debit_INS",convertToDefault(String.valueOf(impInfo.getDebit())));
					deOink.put("A_Credit_INS",convertToDefault(String.valueOf(impInfo.getCredit())));
				}
				else {
					deOink.put("A_ImpairmentStatus_INS["+ i + "]",convertToDefault(String.valueOf(impInfo.getImpairmentStatus())));
					deOink.put("A_ImpairmentClass_INS["+ i + "]",convertToDefault(impInfo.getImpairmentClass()));
					deOink.put("A_ImpairmentRestrictApprovalInd_INS["+ i + "]",convertToDefault(String.valueOf(impInfo.getRestrictApprovalInd())));//ALS3634
					deOink.put("A_ImpairmentType_INS["+ i + "]",convertToDefault(impInfo.getImpairmentType()));
					deOink.put("A_ImpairmentPermFlatExtraAmt_INS["+ i + "]",convertToDefault(impInfo.getImpairmentPermFlatExtraAmt()));
					deOink.put("A_ImpairmentTempFlatExtraAmt_INS["+ i + "]",convertToDefault(impInfo.getImpairmentTempFlatExtraAmt()));
					deOink.put("A_Debit_INS["+ i + "]",convertToDefault(String.valueOf(impInfo.getDebit())));
					deOink.put("A_Credit_INS["+ i + "]",convertToDefault(String.valueOf(impInfo.getCredit())));
				}
			}
			deOink.put("A_no_of_Impairments" , String.valueOf(impInfoList.size()));
	}	
	
	private String convertToDefault(String str) {
		if (str == null || str.equalsIgnoreCase("null")) {
			return "";
		}
		else if (str.equalsIgnoreCase("NaN")) {
			return "-1";
		}
		return str;
	}	
}
