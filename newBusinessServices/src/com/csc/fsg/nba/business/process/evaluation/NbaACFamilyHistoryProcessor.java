package com.csc.fsg.nba.business.process.evaluation;

/*
 * **************************************************************************<BR>
 * This program contains trade secrets and confidential information which<BR>
 * are proprietary to CSC Financial Services Group®.  The use,<BR>
 * reproduction, distribution or disclosure of this program, in whole or in<BR>
 * part, without the express written permission of CSC Financial Services<BR>
 * Group is prohibited.  This program is also an unpublished work protected<BR>
 * under the copyright laws of the United States of America and other<BR>
 * countries.  If this program becomes published, the following notice shall<BR>
 * apply:
 *     Property of Computer Sciences Corporation.<BR>
 *     Confidential. Not for publication.<BR>
 *     Copyright (c) 2002-2008 Computer Sciences Corporation. All Rights Reserved.<BR>
 * **************************************************************************<BR>
 */

import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.csc.fsg.nba.datamanipulation.NbaOinkDataAccess;
import com.csc.fsg.nba.datamanipulation.NbaOinkRequest;
import com.csc.fsg.nba.exception.NbaBaseException;
import com.csc.fsg.nba.exception.NbaVpmsException;
import com.csc.fsg.nba.foundation.NbaConstants;
import com.csc.fsg.nba.vo.NbaAcdb;
import com.csc.fsg.nba.vo.txlife.OLifE;
import com.csc.fsg.nba.vpms.NbaVpmsAdaptor;
import com.csc.fsg.nba.vpms.NbaVpmsModelResult;
import com.csc.fsg.nba.vpms.NbaVpmsResultsData;
import com.csc.fsg.nba.vpms.results.VpmsModelResult;

/**
 * Class that will take care of the processing once ACFamilyHistory model is invoked 
 * from NBCTEVAL and NBRQEVAL process.
 * <p>Implements NbaVpmsModelProcessor 
 * <p>
 * <b>Modifications:</b><br>
 * <table border=0 cellspacing=5 cellpadding=5>
 * <thead>
 * <th align=left>Project</th><th align=left>Release</th><th align=left>Description</th>
 * </thead>
 * <tr><td>ACP013</td><td>Version 4</td><td>Family History</td></tr>
 * <tr><td>ACN016</td><td>Version 4</td><td>PnR MB2</td></tr>
 * <tr><td>SPR2652</td><td>Version 5</td><td>APCTEVAL process getting error stopped with Run time error occured message</td><tr>
 * <tr><td>SPR3329</td><td>Version 7</td><td>Prevent erroneous "Retrieve variable name is invalid" messages from being generated by OINK</td></tr>
 * <tr><td>SPR3362</td><td>Version 7</td><td>Exceptions in Automated Processes and Logon Service Due to VP/MS Memory Leak</td></tr>
 * <tr><td>SPR3290</td><td>Version 7</td><td>General source code clean up during version 7</td></tr>
 * </table>
 * <p>
 * @author CSC FSG Developer
 * @version 7.0.0
 * @since New Business Accelerator - Version 4
 */

public class NbaACFamilyHistoryProcessor extends NbaVpmsModelProcessor {

	//Impairments generated by this class will be stored in this instance. 
	//Such an instance will be in each class that invokes the model.
	protected ArrayList familyHistoryImpairments =new ArrayList();//ACN024
	protected ArrayList accepImpairments = null;	

	/**
	 * Overridden method, calls the model and 
	 * updates the contract with impairments.
	 * @throws NbaBaseException
	 */
	public void execute() throws NbaBaseException {
		boolean isSuccess = false;
		impSrc = NbaConstants.FAMILYHISTORY_SRC; //ACN016
		if(performingContractEvaluation()){	//SPR2652
			int partyIndex = 0;
			List al = getAllInsuredIndexes(); // SPR3290
			OLifE oLifE = nbaTxLife.getOLifE();
			// SPR3290 code deleted
			int insuredCount = al.size();
			for(int i=0;i<insuredCount;i++){
				partyIndex = ((Integer)al.get(i)).intValue();
				String partyId = oLifE.getPartyAt(partyIndex).getId();
				partyID = partyId;
				// SPR3290 code deleted
				familyHistoryImpairments.clear();
				
				isSuccess = callFamilyHistoryModel(partyId, i);	//SPR2632														
				if (!isSuccess){
					throw new NbaVpmsException(NbaVpmsException.VPMS_RESULTS_ERROR + NbaVpmsAdaptor.AC_FAMILYHISTORY);	//SPR2652
				}
				getContractImpairments(partyId);
				ArrayList[] mergedLists = mergeImpairments(contractImpairments, familyHistoryImpairments, new ArrayList(), new ArrayList());
				ArrayList arrMerged = mergedLists[0];
				addImpairmentInfo(partyId, arrMerged);						
			}
		} else if (performingRequirementsEvaluation()) { //SPR2652
				setPartyID(work); //ACN024
				isSuccess = callFamilyHistoryModel();
				if (!isSuccess) {
					throw new NbaVpmsException(NbaVpmsException.VPMS_RESULTS_ERROR + NbaVpmsAdaptor.AC_FAMILYHISTORY);	//SPR2652
				}
				   //Do the Impairments Merging //ACN024
				  mergeImpairmentsAndAccep(familyHistoryImpairments,accepImpairments); //ACN016							
			}
		}
	
	/**
	 * This method is used to call the ACFamilyHistory model	 
	 * @param 
	 * @return boolean : Returns true if the call is successful
	 * 					 Else returns false 	
	 * @throws NbaBaseException
	 */
	//ACP013 New Method	
	public boolean callFamilyHistoryModel() throws NbaBaseException {
		VpmsModelResult vpmsModelResult = null;
		boolean success = false;
		// SPR3290 code deleted
		NbaVpmsAdaptor vpmsProxy = null; //SPR3362
		try {
			NbaOinkDataAccess accessContract =	new NbaOinkDataAccess(txLifeReqResult); //ACN009
			accessContract.setLobSource(work.getNbaLob());
			NbaOinkRequest oinkRequest = new NbaOinkRequest();
			accessContract.setAcdbSource(new NbaAcdb(), nbaTxLife);
			accessContract.setContractSource(nbaTxLife);//SPR3329
			vpmsProxy = new NbaVpmsAdaptor(accessContract, NbaVpmsAdaptor.AC_FAMILYHISTORY); //SPR3362
			vpmsProxy.setVpmsEntryPoint(NbaVpmsAdaptor.EP_RESULTXML);
			Object [] args = getKeys();
			oinkRequest.setArgs(args);	
			vpmsProxy.setANbaOinkRequest(oinkRequest);
			Map deOink = getFamilyHistoryDeOINKValues();
			vpmsProxy.setSkipAttributesMap(deOink);
			NbaVpmsResultsData vpmsResultsData;
			vpmsResultsData = new NbaVpmsResultsData(vpmsProxy.getResults());
			vpmsResultsData.displayResultsData();
			
			if (vpmsResultsData == null) {
				//SPR3362 code deleted
				throw new NbaVpmsException(NbaVpmsException.VPMS_NO_RESULTS + NbaVpmsAdaptor.AC_FAMILYHISTORY); //SPR2652
			} //SPR2652
			String xmlString = (String) vpmsResultsData.getResultsData().get(0);
			if (getLogger().isDebugEnabled()) { 
				getLogger().logDebug(vpmsResult);
			}				
			NbaVpmsModelResult nbaVpmsModelResult = new NbaVpmsModelResult(xmlString);
			vpmsModelResult = nbaVpmsModelResult.getVpmsModelResult();
			familyHistoryImpairments = vpmsModelResult.getImpairmentInfo();
			success = true;			
			// SPR2652 code deleted
			//SPR3362 code deleted
			// SPR2652 code deleted
 		} catch (RemoteException e) {	//SPR2652
			handleRemoteException(e, NbaVpmsAdaptor.AC_FAMILYHISTORY); //SPR2652
		//begin SPR3362
		} finally {
		    if(vpmsProxy != null){
		        try {
		            vpmsProxy.remove();
                } catch (Exception e) {
                    getLogger().logError(NbaBaseException.VPMS_REMOVAL_FAILED);
                }
		    }
		//end SPR3362
		}
		return success;

	}
	/**
	 * This method gets all the deOink variables for ACFamilyHistory model	 
	 * @param 
	 * @return java.util.Map : The Hash Map containing all the deOink variables 	
	 * @throws NbaBaseException
	 */
	//ACP013 New Method			
	public Map getFamilyHistoryDeOINKValues() throws NbaBaseException{	  
		NbaOinkDataAccess oinkData = new NbaOinkDataAccess(txLifeReqResult); //ACN009
		NbaOinkRequest oinkRequest = new NbaOinkRequest();
		String strValue = "";
		String[] ageAtDeathList = null;
		String ageAtDeath = "";
		String[] ageIfLivingList = null;
		String ageIfLiving = "";		
		String[] familyDiagnosisList = null;
		String familyDiagnosis = "";
		String[] onsetAgeList = null;
		String onsetAge = "";
		String[] roleCodeDescList = null;
		String roleCodeDesc = "";

		strValue = "AGEATDEATH_INS";
		oinkRequest.setVariable(strValue);
		ageAtDeathList = oinkData.getStringValuesFor(oinkRequest);
		
		strValue = "AGEIFLIVING_INS";
		oinkRequest.setVariable(strValue);
		ageIfLivingList = oinkData.getStringValuesFor(oinkRequest);
		
		strValue = "DIAGNOSIS_INS";
		oinkRequest.setVariable(strValue);
		familyDiagnosisList = oinkData.getStringValuesFor(oinkRequest);
		
		strValue = "ONSETAGE_INS";
		oinkRequest.setVariable(strValue);
		onsetAgeList = oinkData.getStringValuesFor(oinkRequest);

		strValue = "ROLECODEDESC_INS";
		oinkRequest.setVariable(strValue);
		roleCodeDescList = oinkData.getStringValuesFor(oinkRequest);

		int count = roleCodeDescList.length;

		HashMap deOink = new HashMap();
		// SPR3290 code deleted
		deOink.put("A_NO_OF_ROLECODEDESC", String.valueOf(count)) ;

		for(int i=0; i < count; i++){
			ageAtDeath = ageAtDeathList[i];
			ageIfLiving = ageIfLivingList[i];
			familyDiagnosis = familyDiagnosisList[i];
			onsetAge = onsetAgeList[i];
			roleCodeDesc =  roleCodeDescList[i];
			if(i==0){
				deOink.put("A_AGEATDEATH",ageAtDeath);
				deOink.put("A_AGEIFLIVING",ageIfLiving);
				deOink.put("A_FAMILYDIAGNOSIS",familyDiagnosis);
				deOink.put("A_ONSETAGE",onsetAge);
				deOink.put("A_ROLECODEDESC",roleCodeDesc);								
			}else{
				deOink.put("A_AGEATDEATH["+ i + "]",ageAtDeath);
				deOink.put("A_AGEIFLIVING["+ i + "]",ageIfLiving);
				deOink.put("A_FAMILYDIAGNOSIS["+ i + "]",familyDiagnosis);
				deOink.put("A_ONSETAGE["+ i + "]",onsetAge);
				deOink.put("A_ROLECODEDESC["+ i + "]",roleCodeDesc);
			}
		}
		return deOink;
	}
	
	/**
	 * This method is used to call the ACFamilyHistory model	 
	 * @param 
	 * @return boolean : Returns true if the call is successful
	 * 					 Else returns false 	
	 * @throws NbaBaseException
	 */
	//ACP013 new method.
	public boolean callFamilyHistoryModel(String partyId, int partyIndex) throws NbaBaseException{	//SPR2632
		boolean success = true;
		ArrayList results = null;
		NbaVpmsAdaptor vpmsProxy = null; //SPR3362
		try{		
			NbaOinkDataAccess accessContract = new NbaOinkDataAccess(nbaTxLife);
			NbaOinkRequest oinkRequest = new NbaOinkRequest();
			accessContract.setLobSource(work.getNbaLob());
			accessContract.setAcdbSource(new NbaAcdb(), nbaTxLife);			
			vpmsProxy = new NbaVpmsAdaptor(accessContract, NbaVpmsAdaptor.AC_FAMILYHISTORY); //SPR3362
			vpmsProxy.setVpmsEntryPoint(NbaVpmsAdaptor.EP_RESULTXML);
			oinkRequest.setArgs(getKeys());
			if (updatePartyFilterInRequest(oinkRequest, partyId)) { //SPR2652
				vpmsProxy.setANbaOinkRequest(oinkRequest);
				Map deOink = getFamilyHistoryDeOINKValues(partyId, partyIndex);	//SPR2652
				vpmsProxy.setSkipAttributesMap(deOink);
				NbaVpmsResultsData vpmsResultsData = new NbaVpmsResultsData(vpmsProxy.getResults());
				vpmsResultsData.displayResultsData();
				results = vpmsResultsData.getResultsData();
				if (vpmsResultsData.getResult().isError()) {
					//SPR3362 code deleted
					throw new NbaVpmsException(NbaVpmsException.VPMS_NO_RESULTS + NbaVpmsAdaptor.AC_FAMILYHISTORY); //SPR2652
				}
				//SPR1652
				vpmsResult = (String) results.get(0);
				NbaVpmsModelResult vpmsOutput = new NbaVpmsModelResult(vpmsResult);
				if (getLogger().isDebugEnabled()) {
					getLogger().logDebug(vpmsResult);
				}
				VpmsModelResult vpmModelResult = vpmsOutput.getVpmsModelResult();
				familyHistoryImpairments = vpmModelResult.getImpairmentInfo();
				success = true;
				// SPR1652 code deleted
				//SPR3362 code deleted
			}
		}
		// SPR1652 code deleted
		catch(RemoteException re){	//SPR1652
			handleRemoteException(re, NbaVpmsAdaptor.AC_FAMILYHISTORY); //SPR2652
		//begin SPR3362
		} finally {
		    if(vpmsProxy != null){
		        try {
		            vpmsProxy.remove();
                } catch (Exception e) {
                    getLogger().logError(NbaBaseException.VPMS_REMOVAL_FAILED);
                }
		    }
		//end SPR3362
		}
		return success;
	}
	
	/**
	 * This method gets all the deOink variables for ACFamilyHistory model	 
	 * @param 
	 * @return java.util.Map : The Hash Map containing all the deOink variables 	
	 * @throws NbaBaseException
	 */
	//ACP013 new method.
	public HashMap getFamilyHistoryDeOINKValues(String partyId, int partyIndex) throws NbaBaseException{	//SPR2652
		HashMap deOink = new HashMap(); //SPR2652
		NbaOinkRequest oinkRequest = new NbaOinkRequest();//SPR2652
		if (updatePartyFilterInRequest(oinkRequest, partyId)) { //SPR2652
			NbaOinkDataAccess oinkData = new NbaOinkDataAccess(nbaTxLife);
			// SPR2632 code deleted
			String strValue = "";
			String[] ageAtDeathList = null;
			String ageAtDeath = "";
			String[] ageIfLivingList = null;
			String ageIfLiving = "";
			String[] familyDiagnosisList = null;
			String familyDiagnosis = "";
			String[] onsetAgeList = null;
			String onsetAge = "";
			String[] roleCodeDescList = null;
			String roleCodeDesc = "";

			oinkData.setAcdbSource(new NbaAcdb(), nbaTxLife);
			oinkRequest.setArgs(getKeys());
			// SPR2632 code deleted
			strValue = "AGEATDEATH_INS";
			oinkRequest.setVariable(strValue);
			ageAtDeathList = oinkData.getStringValuesFor(oinkRequest);

			strValue = "AGEIFLIVING_INS";
			oinkRequest.setVariable(strValue);
			ageIfLivingList = oinkData.getStringValuesFor(oinkRequest);

			strValue = "DIAGNOSIS_INS";
			oinkRequest.setVariable(strValue);
			familyDiagnosisList = oinkData.getStringValuesFor(oinkRequest);

			strValue = "ONSETAGE_INS";
			oinkRequest.setVariable(strValue);
			onsetAgeList = oinkData.getStringValuesFor(oinkRequest);

			strValue = "ROLECODEDESC_INS";
			oinkRequest.setVariable(strValue);
			roleCodeDescList = oinkData.getStringValuesFor(oinkRequest);

			int count = roleCodeDescList.length;

			// SPR2632 code deleted
			// SPR3290 code deleted
			deOink.put("A_NO_OF_ROLECODEDESC", String.valueOf(count));

			for (int i = 0; i < count; i++) {
				ageAtDeath = ageAtDeathList[i];
				ageIfLiving = ageIfLivingList[i];
				familyDiagnosis = familyDiagnosisList[i];
				onsetAge = onsetAgeList[i];
				roleCodeDesc = roleCodeDescList[i];
				if (i == 0) {
					deOink.put("A_AGEATDEATH", ageAtDeath);
					deOink.put("A_AGEIFLIVING", ageIfLiving);
					deOink.put("A_FAMILYDIAGNOSIS", familyDiagnosis);
					deOink.put("A_ONSETAGE", onsetAge);
					deOink.put("A_ROLECODEDESC", roleCodeDesc);
				} else {
					deOink.put("A_AGEATDEATH[" + i + "]", ageAtDeath);
					deOink.put("A_AGEIFLIVING[" + i + "]", ageIfLiving);
					deOink.put("A_FAMILYDIAGNOSIS[" + i + "]", familyDiagnosis);
					deOink.put("A_ONSETAGE[" + i + "]", onsetAge);
					deOink.put("A_ROLECODEDESC[" + i + "]", roleCodeDesc);
				}
			}
		}
		return deOink;
	}



}
