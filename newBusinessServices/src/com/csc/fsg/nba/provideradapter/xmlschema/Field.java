/*
 * DO NOT EDIT!
 *
 * This file was generated by the Breeze XML Studio code generator.
 *
 *        Project: file:/N:/NBA/Version2/nba/Development/Providers/OR01.xsd Binding
 *     Class Name: Field
 *           Date: Thu Nov 21 11:38:59 CST 2002
 * Breeze Version: 3.0.0 build 382
 *
 * IMPORTANT: Please see your Breeze license for more information on
 *            where and how this generated code may be used.
 *
 */

package com.csc.fsg.nba.provideradapter.xmlschema;


import java.io.InputStream;
import java.io.OutputStream;

import com.tbf.xml.FormattedOutputStream;
import com.tbf.xml.Validateable;
import com.tbf.xml.XmlAttributeList;
import com.tbf.xml.XmlElement;
import com.tbf.xml.XmlIntegerValidator;
import com.tbf.xml.XmlNamespaceManager;
import com.tbf.xml.XmlObject;
import com.tbf.xml.XmlOutputStream;
import com.tbf.xml.XmlValidationError;
import com.tbf.xml.XmlValidator;

/**
 * Field class.
 *
 */
public class Field
	implements com.tbf.xml.XmlObject,
	com.tbf.xml.Validateable,
	java.io.Serializable {

	/**
	 * Constant for "name" node name.
	 */
	public static final String $NAME = "name";

	/**
	 * Constant for "size" node name.
	 */
	public static final String $SIZE = "size";

	/**
	 * Constant for "table" node name.
	 */
	public static final String $TABLE = "table";

	/**
	 * Constant for "value" node name.
	 */
	public static final String $VALUE = "value";

	/**
	 * Constant for "field" node name.
	 */
	public static final String $FIELD = "field";

	/**
	 * Constant for "required" node name.
	 */
	public static final String $REQUIRED = "required";

	/**
	 * Constant for "valueType" node name.
	 */
	public static final String $VALUE_TYPE = "valueType";

	/**
	 * Constant for "start" node name.
	 */
	public static final String $START = "start";

	//begin SPR1135
	/**
	 * Constant for "start" node name.
	 */
	public static final String $DEFAULT = "default";
	//end SPR1135
	/**
	 * Declarations for the XML related fields.
	 */
	protected String _Name = null;
	protected int _Start = -1;
	protected boolean _has_Start_ = false;
	protected int _Size = -1;
	protected boolean _has_Size_ = false;
	protected boolean _Required = false;
	protected boolean _has_Required_ = false;
	protected String _ValueType = null;
	protected String _Value = null;
	protected String _Table = null;
	protected String _Default = null; //SPR1135

	/**
	 * Holds the parent object of this object.
	 */
	protected transient XmlObject _parent_ = null;


	/**
	 * Default no args constructor.
	 */
	public Field () {
	}


	/**
	 * Creates and populates an instance from the provided parse tree.
	 *
	 * @param  xml  the parse tree
	 */
	public Field (XmlElement xml) {
		unmarshal(xml);
	}


	/**
	 * Creates and populates an instance from the provided parse tree.
	 *
	 * @param  xml  the parse tree
	 * @param  parent  the containibg XmlObject
	 */
	public Field (XmlElement xml, XmlObject parent) {
		_parent_ = parent;
		unmarshal(xml);
	}


	/**
	 * Get the Name property.
	 */
	public String getName () {
		return (_Name);
	}


	/**
	 * Set the Name property.
	 */
	public void setName (String enumValue) {
		_Name = enumValue;
	}


	public void setName (com.tbf.util.EnumType new_value) {

		if (new_value == null) {
			_Name = null;
		} else {
			_Name = new_value.toString();
		}

	}


	/**
	 * Checks for whether Name is set or not.
	 *
	 * @return true if Name is set, false if not
	 */
	 public boolean hasName () {
		return (_Name != null);
	}


	/**
	 * Discards Name's value.
	 */
	 public void deleteName () {
		_Name = null;
	}


	/**
	 * Get the Start property.
	 */
	public int getStart () {
		if (_has_Start_) {
			return (_Start);
		}

		return (-1);
	}


	/**
	 * Set the Start property.
	 */
	public void setStart (int new_value) {
		_Start = new_value;
		_has_Start_ = true;
		_format_errors.remove("Field.Start");
	}


	public void setStart (String new_value) {

		if (new_value == null) {
			_Start = -1;
			_has_Start_ = false;
			return;
		}

		try {
			_Start = Integer.parseInt(new_value);
			_has_Start_ = true;
			_format_errors.remove("Field.Start");
		} catch (NumberFormatException nfe) {
			_has_Start_ = false;
			XmlValidationError.addValidityFormatError(
				_format_errors, "Field.Start", "Attribute",
				"field/start", new_value);
		}
	}


	/**
	 * Checks for whether Start is set or not.
	 *
	 * @return true if Start is set, false if not
	 */
	public boolean hasStart () {
		return (_has_Start_);
	}


	/**
	 * Discards Start's value.
	 */
	public void deleteStart () {
		_has_Start_ = false;
		_format_errors.remove("Field.Start");
	}


	/**
	 * Get the Size property.
	 */
	public int getSize () {
		if (_has_Size_) {
			return (_Size);
		}

		return (-1);
	}


	/**
	 * Set the Size property.
	 */
	public void setSize (int new_value) {
		_Size = new_value;
		_has_Size_ = true;
		_format_errors.remove("Field.Size");
	}


	public void setSize (String new_value) {

		if (new_value == null) {
			_Size = -1;
			_has_Size_ = false;
			return;
		}

		try {
			_Size = Integer.parseInt(new_value);
			_has_Size_ = true;
			_format_errors.remove("Field.Size");
		} catch (NumberFormatException nfe) {
			_has_Size_ = false;
			XmlValidationError.addValidityFormatError(
				_format_errors, "Field.Size", "Attribute",
				"field/size", new_value);
		}
	}


	/**
	 * Checks for whether Size is set or not.
	 *
	 * @return true if Size is set, false if not
	 */
	public boolean hasSize () {
		return (_has_Size_);
	}


	/**
	 * Discards Size's value.
	 */
	public void deleteSize () {
		_has_Size_ = false;
		_format_errors.remove("Field.Size");
	}


	/**
	 * Get the Required property.
	 */
	public boolean getRequired () {
		if (_has_Required_) {
			return (_Required);
		}

		return (false);
	}


	/**
	 * Set the Required property.
	 */
	public void setRequired (boolean new_value) {
		_Required = new_value;
		_has_Required_ = true;
		_format_errors.remove("Field.Required");
	}

	public void setRequired (String new_value) {

		if (new_value == null) {
			_Required = false;
			_has_Required_ = false;
			return;
		}

		try {
			_Required =
				com.tbf.util.Misc.parseBoolean(new_value);
			_has_Required_ = true;
			_format_errors.remove("Field.Required");
		} catch (Exception e) {
			_Required = false;
			_has_Required_ = false;
			XmlValidationError.addValidityFormatError(
				_format_errors, "Field.Required", "Attribute",
				"field/required", new_value);
		}
	}


	/**
	 * Checks for whether Required is set or not.
	 *
	 * @return true if Required is set, false if not
	 */
	public boolean hasRequired () {
		return (_has_Required_);
	}


	/**
	 * Discards Required's value.
	 */
	public void deleteRequired () {
		_has_Required_ = false;
		_format_errors.remove("Field.Required");
	}


	/**
	 * Get the ValueType property.
	 */
	public String getValueType () {
		return (_ValueType);
	}


	/**
	 * Set the ValueType property.
	 */
	public void setValueType (String enumValue) {
		_ValueType = enumValue;
	}


	public void setValueType (com.tbf.util.EnumType new_value) {

		if (new_value == null) {
			_ValueType = null;
		} else {
			_ValueType = new_value.toString();
		}

	}


	/**
	 * Checks for whether ValueType is set or not.
	 *
	 * @return true if ValueType is set, false if not
	 */
	 public boolean hasValueType () {
		return (_ValueType != null);
	}


	/**
	 * Discards ValueType's value.
	 */
	 public void deleteValueType () {
		_ValueType = null;
	}


	/**
	 * Get the Value property.
	 */
	public String getValue () {
		return (_Value);
	}


	/**
	 * Set the Value property.
	 */
	public void setValue (String enumValue) {
		_Value = enumValue;
	}


	public void setValue (com.tbf.util.EnumType new_value) {

		if (new_value == null) {
			_Value = null;
		} else {
			_Value = new_value.toString();
		}

	}


	/**
	 * Checks for whether Value is set or not.
	 *
	 * @return true if Value is set, false if not
	 */
	 public boolean hasValue () {
		return (_Value != null);
	}


	/**
	 * Discards Value's value.
	 */
	 public void deleteValue () {
		_Value = null;
	}


	/**
	 * Get the Table property.
	 */
	public String getTable () {
		return (_Table);
	}


	/**
	 * Set the Table property.
	 */
	public void setTable (String enumValue) {
		_Table = enumValue;
	}


	public void setTable (com.tbf.util.EnumType new_value) {

		if (new_value == null) {
			_Table = null;
		} else {
			_Table = new_value.toString();
		}

	}


	/**
	 * Checks for whether Table is set or not.
	 *
	 * @return true if Table is set, false if not
	 */
	 public boolean hasTable () {
		return (_Table != null);
	}


	/**
	 * Discards Table's value.
	 */
	 public void deleteTable () {
		_Table = null;
	}

	//begin SPR1135
	/**
	 * Get the Default property.
	 */
	public String getDefault () {
		return (_Default);
	}


	/**
	 * Set the Default property.
	 */
	public void setDefault (String enumValue) {
		_Default = enumValue;
	}


	public void setDefault (com.tbf.util.EnumType new_value) {

		if (new_value == null) {
			_Default = null;
		} else {
			_Default = new_value.toString();
		}

	}


	/**
	 * Checks for whether Default is set or not.
	 *
	 * @return true if Default is set, false if not
	 */
	 public boolean hasDefault () {
		return (_Default != null);
	}


	/**
	 * Discards Default's value.
	 */
	 public void deleteDefault () {
		_Default = null;
	}
	//end SRP1135

	protected String _node_name_ = $FIELD;

	/**
	 * Get the XML tag name for this instance.
	 */
	public String getXmlTagName () {
		return (_node_name_);
	}


	/**
	 * Set the XML tag name for this instance.
	 */
	public void setXmlTagName (String node_name) {
		_node_name_ = node_name;
	}


	/**
	 * Gets the XML tag name for this class.
	 */
	public static String getClassXmlTagName () {
		return ($FIELD);
	}


	/**
	 * Keeps track of format errors that are
	 * thrown in the numeric setXXX() methods().
	 */
	protected java.util.Hashtable _format_errors =
		new java.util.Hashtable();


	/**
	 * This flag is used to used to check whether
	 * the validators have been created.
	 */
	transient protected static boolean _validators_created = false;

	/*
	 * XML Validators
	 */
	transient protected static XmlValidator 
		_Name_validator_ = null;
	transient protected static XmlIntegerValidator
		_Start_validator_ = null;
	transient protected static XmlIntegerValidator
		_Size_validator_ = null;
	transient protected static XmlValidator 
		_Required_validator_ = null;
	transient protected static XmlValidator 
		_ValueType_validator_ = null;
	transient protected static XmlValidator 
		_Value_validator_ = null;
	transient protected static XmlValidator 
		_Table_validator_ = null;
	transient protected static XmlValidator 
		_Default_validator_ = null;			//SPR1135

	/**
	 * Create the validators for this class.
	 */
	protected static synchronized void createValidators () {

		if (_validators_created) {
			return;
		}

		_Name_validator_ = new XmlValidator(
			"Field.Name", "Attribute", 
			"field/name", 0, 1);

		_Start_validator_ = new XmlIntegerValidator(
			"Field.Start", "Attribute",
			"field/start",
			0, XmlValidator.NOT_USED,
			0, XmlValidator.NOT_USED, 0, 1);

		_Size_validator_ = new XmlIntegerValidator(
			"Field.Size", "Attribute",
			"field/size",
			0, XmlValidator.NOT_USED,
			0, XmlValidator.NOT_USED, 0, 1);

		_Required_validator_ = new XmlValidator(
			"Field.Required", "Attribute", 
			"field/required", 0, 1);

		_ValueType_validator_ = new XmlValidator(
			"Field.ValueType", "Attribute", 
			"field/valueType", 0, 1);

		_Value_validator_ = new XmlValidator(
			"Field.Value", "Attribute", 
			"field/value", 0, 1);

		_Table_validator_ = new XmlValidator(
			"Field.Table", "Attribute", 
			"field/table", 0, 1);
			
		//begin SPR1135
		_Default_validator_ = new XmlValidator(
			"Field.Default", "Attribute", 
			"field/default", 0, 1);
		//end SPR1135

		_validators_created = true;
	}


	/**
	 * Checks this object to see if it will produce valid XML.
	 */
	public boolean isValid () {

		if (!(this instanceof Validateable)) {
			return (true);
		}

		java.util.Vector errors = getValidationErrors(true);
		if (errors == null || errors.size() < 1) {
			return (true);
		}

		return (false);
	}


	/**
	 * Checks each field on the object for validity and
	 * returns a Vector holding the validation errors.
	 */
	public java.util.Vector getValidationErrors () {
		return (getValidationErrors(false));
	}


	/**
	 * Checks each field on the object for validity and
	 * returns a java.util.Vector holding the validation errors.
	 *
	 * @return  a Vector containing the validation errors
	 */
	public java.util.Vector getValidationErrors (boolean return_on_error) {
		return (getValidationErrors(return_on_error, true));
	}


	/**
	 * Checks each field on the object for validity and
	 * returns a Vector holding the validation errors.
	 *
	 * @return  a Vector containing the validation errors
	 */
	public java.util.Vector getValidationErrors (
		boolean return_on_error, boolean traverse) {

		createValidators();

		java.util.Vector errors = new java.util.Vector(4, 4);
		XmlValidationError e;
		e = _Name_validator_.validate(
			_Name, Name.class);
		if (e != null) {
			errors.addElement(e);
			if (return_on_error) {
				return (errors);
			}
		}

		e = _Start_validator_.validate(
			_Start,
			_has_Start_, _format_errors);
		if (e != null) {
			errors.addElement(e);
			if (return_on_error) {
				return (errors);
			}
		}

		e = _Size_validator_.validate(
			_Size,
			_has_Size_, _format_errors);
		if (e != null) {
			errors.addElement(e);
			if (return_on_error) {
				return (errors);
			}
		}

		e = _Required_validator_.validate(
			_has_Required_, _format_errors);
		if (e != null) {
			errors.addElement(e);
			if (return_on_error) {
				return (errors);
			}
		}

		e = _ValueType_validator_.validate(
			_ValueType, ValueType.class);
		if (e != null) {
			errors.addElement(e);
			if (return_on_error) {
				return (errors);
			}
		}

		e = _Value_validator_.validate(
			_Value, Value.class);
		if (e != null) {
			errors.addElement(e);
			if (return_on_error) {
				return (errors);
			}
		}

		e = _Table_validator_.validate(
			_Table, Table.class);
		if (e != null) {
			errors.addElement(e);
			if (return_on_error) {
				return (errors);
			}
		}

		//begin SPR1135
		e = _Default_validator_.validate(
			_Default, Default.class);
		if (e != null) {
			errors.addElement(e);
			if (return_on_error) {
				return (errors);
			}
		}
		//end SPR1135
		
		if (errors.size() < 1) {
			return (null);
		}

		return (errors);
	}


	/**
	 * Checks the XML to see whether it matches the
	 * XML contents of this class.
	 */
	public static boolean matches (XmlElement xml, XmlObject parent) {

		if (xml == null) {
			return (false);
		}

		return (xml.matches($FIELD, nsm, parent));
	}


	/**
	 * This method unmarshals an XML document instance
	 * into an instance of this class.
	 */
	public static Field unmarshal (
			InputStream in) throws Exception {

		Field obj = new Field();
		ObjectFactory.unmarshal(obj, in);
		return (obj);
	}


	/**
	 * Populates this object with the values from the 
	 * parsed XML.
	 * @deprecated  will be removed in a future release.
	 * Use {@link #unmarshal(XmlElement)}.
	 */
	public void fromXml (XmlElement xml) {
		unmarshal(xml);
	}


	/**
	 * Populates this object with the values from the 
	 * parsed XML.
	 *
	 * @since 2.5
	 */
	public void unmarshal (XmlElement xml) {

		if (xml == null) {
			return;
		}

		if (!xml.matches($FIELD, this)) {
			return;
		}

		java.util.Vector doc_namespaces = xml.getDeclaredNamespaces();
		if (doc_namespaces != null) {
			_doc_declared_namespaces_ = 
				(java.util.Vector)doc_namespaces.clone();
		}

		unmarshalAttributes(xml);
	}


	/**
	 * Unmarshal any attributes.
	 *
	 * @param xml the XmlElement holding the parsed XML
	 * @since 2.5
	 */
	protected void unmarshalAttributes (XmlElement xml) {

		/*
		 * Set the attribute based field(s)
		 */
		setName(xml.getAttribute($NAME, this));
		setStart(xml.getAttribute($START, this));
		setSize(xml.getAttribute($SIZE, this));
		setRequired(xml.getAttribute($REQUIRED, this));
		setValueType(xml.getAttribute($VALUE_TYPE, this));
		setValue(xml.getAttribute($VALUE, this));
		setTable(xml.getAttribute($TABLE, this));
		setDefault(xml.getAttribute($DEFAULT, this));//SPR1135
	}


	/**
	 * Writes this instance to a stream. 
	 *
	 * @param  stream  the OutputStream to write the XML object to
	 * @deprecated  This method will be removed in a future release.
	 * Use {@link #marshal(XmlOutputStream)} or {@link #marshal(OutputStream)}.
	 */
	public void toXml (OutputStream stream) {
		marshal(stream);
	}


	/**
	 * Writes this instance to a stream. 
	 *
	 * @param  stream  the OutputStream to write the XML object to
	 * @param  embed_files  set to true to embed files in the XML
	 * @deprecated  This method will be removed in a future release.
	 * Use {@link #marshal(XmlOutputStream)} or {@link #marshal(OutputStream)}.
	 */
	public void toXml (OutputStream stream, boolean embed_files) {

		XmlOutputStream out = new FormattedOutputStream(stream);
		out.setEmbedFiles(embed_files);
		marshal(out);
	}


	/**
	 * Writes this instance to a stream. 
	 *
	 * @param  stream  the OutputStream to write the XML object to
	 * @param  embed_files  set to true to embed files in the XML
	 * @deprecated  This method will be removed in a future release.
	 * Use {@link #marshal(XmlOutputStream)} or {@link #marshal(OutputStream)}.
	 */
	public void toXml (
			OutputStream stream, String indent, boolean embed_files)	{

		FormattedOutputStream out = new FormattedOutputStream(stream);
		out.setIndentString(indent);
		out.setEmbedFiles(embed_files);
		marshal(out);
	}


	/**
	 * Writes this instance to a stream. If the OutputStream is not an
	 * instance of XmlOutputStream then a FormattedOutputStream
	 * will be created which wraps the OutputStream.
	 *
	 * @param  stream  the OutputStream to write the XML object to
	 * @see #marshal(XmlOutputStream)
	 * @since 2.5
	 */
	public void marshal (OutputStream stream) {

		XmlOutputStream out = new FormattedOutputStream(stream);
		marshal(out);
	}


	/**
	 * Writes this instance to an XmlOutputStream.
	 *
	 * @param  out  the XmlOutputStream to write the XML object to
	 * @see #marshal(OutputStream)
	 * @since 2.5
	 */
	public void marshal (XmlOutputStream out) {

		XmlAttributeList attrs = new XmlAttributeList(nsm);
		attrs = marshalAttributes(attrs);
		out.writeStartTag(getXmlTagName(), attrs, true);

	}


	/**
	 * Get the XmlAttributeList for marshalling.
	 *
	 * @param attrs  the currently populated XmlAttributeList.
	 * @return  a populated XmlAttributeList
	 * @since 2.5
	 */
	protected XmlAttributeList marshalAttributes (XmlAttributeList attrs) {

		if (attrs == null) {
			attrs = new XmlAttributeList();
		}

		attrs.add($NAME, _Name);
		attrs.add($START, _Start, _has_Start_);
		attrs.add($SIZE, _Size, _has_Size_);
		attrs.add($REQUIRED, _Required, _has_Required_);
		attrs.add($VALUE_TYPE, _ValueType);
		attrs.add($VALUE, _Value);
		attrs.add($TABLE, _Table);
		attrs.add($DEFAULT, _Default); //SPR1135
		return (attrs);
	}


	/**
	 * Get this object's parent object.
	 */
	public XmlObject get$Parent () {
		return (_parent_);
	}


	/**
	 * Set this object's parent object.
	 */
	public void set$Parent (XmlObject parent) {
		_parent_ = parent;
	}


	/**
	 * The default <code>XmlNamespaceManager</code> for this class.
	 * @since 2.5
	 */
	public static XmlNamespaceManager nsm = null;


	/**
	 * Get the <code>XmlNamespaceManager</code> for this class.
	 * This will be null if no namespaces on this class or if
	 * namespace support is disabled during code generation.
	 *
	 * @since 2.5
	 */
	public XmlNamespaceManager get$NamespaceManager () {
		return (nsm);
	}


	/**
	 * Storage for namespaces declared in the input document.
	 * @since 2.5
	 */
	protected java.util.Vector _doc_declared_namespaces_ = null;


	/**
	 * Get the Vector holding the namespaces declared in the element
	 * that this instance was unmarshalled from.
	 *
	 * @since 2.5
	 */
	public java.util.Vector get$DocumentNamespaces () {
		return (_doc_declared_namespaces_);
	}


	/**
	 * Enumeration types for the Name property.
	 */
	public static final class Name
			extends com.tbf.util.EnumType {

		public static final Name NOTE = 
			new Name(0, "Note");
		public static final Name SSN = 
			new Name(1, "SSN");
		public static final Name GENDER = 
			new Name(2, "Gender");
		public static final Name CITY = 
			new Name(3, "City");
		public static final Name STATE = 
			new Name(4, "State");


		protected Name(int value, String desc) {
			super(value, desc);
		}


		public static final java.util.Enumeration elements () {
			return (elements(Name.class));
		}


		public static final Name fromString (String str) {
			return ((Field.Name)
				getByString(Field.Name.class, str));
		}
	}


	/**
	 * Enumeration types for the ValueType property.
	 */
	public static final class ValueType
			extends com.tbf.util.EnumType {

		public static final ValueType C = 
			new ValueType(0, "c");
		public static final ValueType O = 
			new ValueType(1, "o");
		public static final ValueType X = 
			new ValueType(2, "x");
		public static final ValueType T = 
			new ValueType(3, "t");
		public static final ValueType P = 
			new ValueType(4, "p");
		public static final ValueType V = 
			new ValueType(5, "v");


		protected ValueType(int value, String desc) {
			super(value, desc);
		}


		public static final java.util.Enumeration elements () {
			return (elements(ValueType.class));
		}


		public static final ValueType fromString (String str) {
			return ((Field.ValueType)
				getByString(Field.ValueType.class, str));
		}
	}


	/**
	 * Enumeration types for the Value property.
	 */
	public static final class Value
			extends com.tbf.util.EnumType {

		public static final Value OR01 = 
			new Value(0, "OR01");
		public static final Value V01 = 
			new Value(1, "V01");
		public static final Value OO = 
			new Value(2, "OO");
		public static final Value CLIF = 
			new Value(3, "CLIF");
		public static final Value N = 
			new Value(4, "N");
		public static final Value ONNN = 
			new Value(5, "ONnn");
		public static final Value AN01 = 
			new Value(6, "AN01");
		public static final Value LAST_NAME = 
			new Value(7, "LastName");
		public static final Value FIRST_NAME = 
			new Value(8, "FirstName");
		public static final Value MIDDLE_NAME = 
			new Value(9, "MiddleName");
		public static final Value PARTY_PERSON_PREFIX = 
			new Value(10, "Party.Person.Prefix");
		public static final Value PARTY_PERSON_SUFFIX = 
			new Value(11, "Party.Person.Suffix");
		public static final Value BIRTH_DATE = 
			new Value(12, "BirthDate");
		public static final Value GOVT_ID = 
			new Value(13, "GovtID");
		public static final Value GENDER = 
			new Value(14, "Gender");
		public static final Value MAR_STAT = 
			new Value(15, "MarStat");
		public static final Value RATE_CLASS = 
			new Value(16, "RateClass");
		public static final Value PARTY_PERSON_AGE = 
			new Value(17, "Party.Person.Age");
		public static final Value PARTY_BEST_TIME_TO_CALL_FROM = 
			new Value(18, "Party.BestTimeToCallFrom");
		public static final Value AN02 = 
			new Value(19, "AN02");
		public static final Value HOM_LINE1 = 
			new Value(20, "HomLine1");
		public static final Value HOM_PHONE = 
			new Value(21, "HomPhone");
		public static final Value OFF_PHONE = 
			new Value(22, "OffPhone");
		public static final Value PARTY_PHONE_EXT = 
			new Value(23, "Party.Phone.Ext");
		public static final Value PARTY_PHONE_PHONE_COUNTRY_TC = 
			new Value(24, "Party.Phone.PhoneCountryTC");
		public static final Value PARTY_PHONE_COUNTRY_CODE = 
			new Value(25, "Party.Phone.CountryCode");
		public static final Value AN03 = 
			new Value(26, "AN03");
		public static final Value HOM_LINE2 = 
			new Value(27, "HomLine2");
		public static final Value HOM_LINE3 = 
			new Value(28, "HomLine3");
		public static final Value HOM_CITY = 
			new Value(29, "HomCity");
		public static final Value HOM_STATE = 
			new Value(30, "HomState");
		public static final Value HOM_ZIP = 
			new Value(31, "HomZip");
		public static final Value AN04 = 
			new Value(32, "AN04");
		public static final Value DRIVER_LIC_STATE = 
			new Value(33, "DriverLicState");
		public static final Value DRIVER_LIC_NUM = 
			new Value(34, "DriverLicNum");
		public static final Value RELATION_ROLE_CODE = 
			new Value(35, "RelationRoleCode");
		public static final Value PARTY_CLIENT_PREF_LANGUAGE = 
			new Value(36, "Party.Client.PrefLanguage");
		public static final Value OCCUPATION = 
			new Value(37, "Occupation");
		public static final Value EI01 = 
			new Value(38, "EI01");
		public static final Value EMPLOYER_NAME = 
			new Value(39, "EmployerName");
		public static final Value EI02 = 
			new Value(40, "EI02");
		public static final Value LV01 = 
			new Value(41, "LV01");
		public static final Value HOLDING_POLICY_APPLICATION_INFO_HOUNDERWRITER_NAME = 
			new Value(42, "Holding.Policy.ApplicationInfo.HOUnderwriterName");
		public static final Value CO01 = 
			new Value(43, "CO01");
		public static final Value PARTY_ORGANIZATION_ORGANIZATION_KEY = 
			new Value(44, "Party.Organization.OrganizationKey");
		public static final Value PARTY_ORGANIZATION_ORG_CODE = 
			new Value(45, "Party.Organization.OrgCode");
		public static final Value PARTY_FULL_NAME = 
			new Value(46, "Party.FullName");
		public static final Value AG01 = 
			new Value(47, "AG01");
		public static final Value AGENT_LIC_NUM = 
			new Value(48, "AgentLicNum");
		public static final Value AG02 = 
			new Value(49, "AG02");
		public static final Value OFF_EMAIL = 
			new Value(50, "OffEmail");
		public static final Value PI01 = 
			new Value(51, "PI01");
		public static final Value HOLDING_POLICY_LINEOF_BUSINESS = 
			new Value(52, "Holding.Policy.LineofBusiness");
		public static final Value CURRENT_AMT_BASE = 
			new Value(53, "CurrentAmt_BASE");
		public static final Value POL_NUMBER = 
			new Value(54, "PolNumber");
		public static final Value SIGNED_DATE = 
			new Value(55, "SignedDate");
		public static final Value YN = 
			new Value(56, "YN");
		public static final Value RPNN = 
			new Value(57, "RPnn");
		public static final Value SRNN = 
			new Value(58, "SRnn");
		public static final Value REQ_TYPE_LOB = 
			new Value(59, "ReqType_LOB");
		public static final Value SCNN = 
			new Value(60, "SCnn");
		public static final Value PTNN = 
			new Value(61, "PTnn");
		public static final Value _01 = 
			new Value(62, "01");
		public static final Value TOTL = 
			new Value(63, "TOTL");
		public static final Value _1 = 
			new Value(64, "1");
		public static final Value RECORD_COUNT = 
			new Value(65, "record.count");


		protected Value(int value, String desc) {
			super(value, desc);
		}


		public static final java.util.Enumeration elements () {
			return (elements(Value.class));
		}


		public static final Value fromString (String str) {
			return ((Field.Value)
				getByString(Field.Value.class, str));
		}
	}


	/**
	 * Enumeration types for the Table property.
	 */
	public static final class Table
			extends com.tbf.util.EnumType {

		public static final Table OLI_LU_GENDER = 
			new Table(0, "OLI_LU_GENDER");
		public static final Table OLI_LU_MARSTAT = 
			new Table(1, "OLI_LU_MARSTAT");
		public static final Table NBA_RATE_CLASS = 
			new Table(2, "NBA_RateClass");
		public static final Table OLI_LU_CLIENTLANGUAGES = 
			new Table(3, "OLI_LU_CLIENTLANGUAGES");
		public static final Table LAB1_PRODUCTS = 
			new Table(4, "LAB1_Products");
		public static final Table LAB1_POLICY_ROLE = 
			new Table(5, "LAB1_PolicyRole");
		public static final Table NBA_REQUIREMENTS = 
			new Table(6, "NBA_REQUIREMENTS");


		protected Table(int value, String desc) {
			super(value, desc);
		}


		public static final java.util.Enumeration elements () {
			return (elements(Table.class));
		}


		public static final Table fromString (String str) {
			return ((Field.Table)
				getByString(Field.Table.class, str));
		}
	}
	
	//begin SPR1135
	/**
	 * Enumeration types for the ValueType property.
	 */
	public static final class Default
			extends com.tbf.util.EnumType {

		public static final Default OOOOO = 
			new Default(0, "00000");
		public static final Default OOOOOO = 
			new Default(1, "000000");
		

		protected Default(int value, String desc) {
			super(value, desc);
		}


		public static final java.util.Enumeration elements () {
			return (elements(Default.class));
		}


		public static final Default fromString (String str) {
			return ((Field.Default)
				getByString(Field.Default.class, str));
		}
	}
	//end SPR1135
}
