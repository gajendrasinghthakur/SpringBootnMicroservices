/*
 * DO NOT EDIT!
 *
 * This file was generated by the Breeze XML Studio code generator.
 *
 *        Project: file:/N:/NBA/Version2/nba/Development/Providers/OR01.xsd Binding
 *     Class Name: Record
 *           Date: Thu Nov 21 11:38:59 CST 2002
 * Breeze Version: 3.0.0 build 382
 *
 * IMPORTANT: Please see your Breeze license for more information on
 *            where and how this generated code may be used.
 *
 */

package com.csc.fsg.nba.provideradapter.xmlschema;


import java.io.InputStream;
import java.io.OutputStream;

import com.tbf.xml.FormattedOutputStream;
import com.tbf.xml.Validateable;
import com.tbf.xml.XmlAttributeList;
import com.tbf.xml.XmlElement;
import com.tbf.xml.XmlNamespaceManager;
import com.tbf.xml.XmlObject;
import com.tbf.xml.XmlOutputStream;
import com.tbf.xml.XmlValidationError;
import com.tbf.xml.XmlValidator;

/**
 * Record class.
 *
 */
public class Record
	implements com.tbf.xml.XmlObject,
	com.tbf.xml.Validateable,
	java.io.Serializable {

	/**
	 * Constant for "record" node name.
	 */
	public static final String $RECORD = "record";

	/**
	 * Constant for "oinkPartyFilter" node name.
	 */
	public static final String $OINK_PARTY_FILTER = "oinkPartyFilter";

	/**
	 * Constant for "type" node name.
	 */
	public static final String $TYPE = "type";

	/**
	 * Constant for "mandatory" node name.
	 */
	public static final String $MANDATORY = "mandatory";

	/**
	 * Constant for "field" node name.
	 */
	public static final String $FIELD = "field";


	/**
	 * Declarations for the XML related fields.
	 */
	protected java.util.ArrayList _Field = new java.util.ArrayList();
	protected String _Type = null;
	protected boolean _Mandatory = false;
	protected boolean _has_Mandatory_ = false;
	protected String _OinkPartyFilter = null;


	/**
	 * Holds the parent object of this object.
	 */
	protected transient XmlObject _parent_ = null;


	/**
	 * Storage for UNEXPECTED_XML errors.
	 */
	protected transient java.util.Vector _unexpected_xml_errors_ = null;


	/**
	 * Default no args constructor.
	 */
	public Record () {
	}


	/**
	 * Creates and populates an instance from the provided parse tree.
	 *
	 * @param  xml  the parse tree
	 */
	public Record (XmlElement xml) {
		unmarshal(xml);
	}


	/**
	 * Creates and populates an instance from the provided parse tree.
	 *
	 * @param  xml  the parse tree
	 * @param  parent  the containibg XmlObject
	 */
	public Record (XmlElement xml, XmlObject parent) {
		_parent_ = parent;
		unmarshal(xml);
	}


	/**
	 * Get the Field property.
	 */
	public java.util.ArrayList getField () {
		return (_Field);
	}


	public Field getFieldAt (int index)
			throws IndexOutOfBoundsException {
		return ((Field)_Field.get(index));
	}


	/**
	 * Get the count of elements in the Field property.
	 */
	public int getFieldCount () {
		if (_Field == null) {
			return (0);
		}

		return (_Field.size());
	}


	/**
	 * Set the Field property.
	 */
	public void setField (java.util.ArrayList newList) {

		if (newList == null) {
			_Field.clear();
		} else {
			_Field = (java.util.ArrayList)newList.clone();
		}
	}


	public void addField (Field obj) {
		if (obj == null) {
			return;
		}

		_Field.add(obj);
	}


	public void setFieldAt (Field obj, int index)
			throws IndexOutOfBoundsException {
		if (obj == null) {
			return;
		}

		_Field.set(index, obj);
	}


	public void removeField (Field obj) {
		if (obj == null) {
			return;
		}

		_Field.remove(obj);
	}


	public void removeFieldAt (int index)
			throws IndexOutOfBoundsException {
		_Field.remove(index);
	}


	private void setField (XmlElement xml) {

		_Field.clear();
		XmlElement saved_xml = xml;

		while (xml != null &&
			Field.matches(xml, this)) {
			Object obj = new Field(xml, this);
			_Field.add(obj);
			saved_xml.setLastProcessed(xml);
			xml = xml.next();
		}
	}


	/**
	 * Get the Type property.
	 */
	public String getType () {
		return (_Type);
	}


	/**
	 * Set the Type property.
	 */
	public void setType (String enumValue) {
		_Type = enumValue;
	}


	public void setType (com.tbf.util.EnumType new_value) {

		if (new_value == null) {
			_Type = null;
		} else {
			_Type = new_value.toString();
		}

	}


	/**
	 * Checks for whether Type is set or not.
	 *
	 * @return true if Type is set, false if not
	 */
	 public boolean hasType () {
		return (_Type != null);
	}


	/**
	 * Discards Type's value.
	 */
	 public void deleteType () {
		_Type = null;
	}


	/**
	 * Get the Mandatory property.
	 */
	public boolean getMandatory () {
		if (_has_Mandatory_) {
			return (_Mandatory);
		}

		return (false);
	}


	/**
	 * Set the Mandatory property.
	 */
	public void setMandatory (boolean new_value) {
		_Mandatory = new_value;
		_has_Mandatory_ = true;
		_format_errors.remove("Record.Mandatory");
	}

	public void setMandatory (String new_value) {

		if (new_value == null) {
			_Mandatory = false;
			_has_Mandatory_ = false;
			return;
		}

		try {
			_Mandatory =
				com.tbf.util.Misc.parseBoolean(new_value);
			_has_Mandatory_ = true;
			_format_errors.remove("Record.Mandatory");
		} catch (Exception e) {
			_Mandatory = false;
			_has_Mandatory_ = false;
			XmlValidationError.addValidityFormatError(
				_format_errors, "Record.Mandatory", "Attribute",
				"record/mandatory", new_value);
		}
	}


	/**
	 * Checks for whether Mandatory is set or not.
	 *
	 * @return true if Mandatory is set, false if not
	 */
	public boolean hasMandatory () {
		return (_has_Mandatory_);
	}


	/**
	 * Discards Mandatory's value.
	 */
	public void deleteMandatory () {
		_has_Mandatory_ = false;
		_format_errors.remove("Record.Mandatory");
	}


	/**
	 * Get the OinkPartyFilter property.
	 */
	public String getOinkPartyFilter () {
		return (_OinkPartyFilter);
	}


	/**
	 * Set the OinkPartyFilter property.
	 */
	public void setOinkPartyFilter (String enumValue) {
		_OinkPartyFilter = enumValue;
	}


	public void setOinkPartyFilter (com.tbf.util.EnumType new_value) {

		if (new_value == null) {
			_OinkPartyFilter = null;
		} else {
			_OinkPartyFilter = new_value.toString();
		}

	}


	/**
	 * Checks for whether OinkPartyFilter is set or not.
	 *
	 * @return true if OinkPartyFilter is set, false if not
	 */
	 public boolean hasOinkPartyFilter () {
		return (_OinkPartyFilter != null);
	}


	/**
	 * Discards OinkPartyFilter's value.
	 */
	 public void deleteOinkPartyFilter () {
		_OinkPartyFilter = null;
	}


	protected String _node_name_ = $RECORD;

	/**
	 * Get the XML tag name for this instance.
	 */
	public String getXmlTagName () {
		return (_node_name_);
	}


	/**
	 * Set the XML tag name for this instance.
	 */
	public void setXmlTagName (String node_name) {
		_node_name_ = node_name;
	}


	/**
	 * Gets the XML tag name for this class.
	 */
	public static String getClassXmlTagName () {
		return ($RECORD);
	}


	/**
	 * Keeps track of format errors that are
	 * thrown in the numeric setXXX() methods().
	 */
	protected java.util.Hashtable _format_errors =
		new java.util.Hashtable();


	/**
	 * This flag is used to used to check whether
	 * the validators have been created.
	 */
	transient protected static boolean _validators_created = false;

	/*
	 * XML Validators
	 */
	transient protected static XmlValidator 
		_Field_validator_ = null;
	transient protected static XmlValidator 
		_Type_validator_ = null;
	transient protected static XmlValidator 
		_Mandatory_validator_ = null;
	transient protected static XmlValidator 
		_OinkPartyFilter_validator_ = null;

	/**
	 * Create the validators for this class.
	 */
	protected static synchronized void createValidators () {

		if (_validators_created) {
			return;
		}

		_Field_validator_ = new XmlValidator(
			"Record.Field", "Element", 
			"record/field", 0, -1);

		_Type_validator_ = new XmlValidator(
			"Record.Type", "Attribute", 
			"record/type", 0, 1);

		_Mandatory_validator_ = new XmlValidator(
			"Record.Mandatory", "Attribute", 
			"record/mandatory", 0, 1);

		_OinkPartyFilter_validator_ = new XmlValidator(
			"Record.OinkPartyFilter", "Attribute", 
			"record/oinkPartyFilter", 0, 1);

		_validators_created = true;
	}


	/**
	 * Checks this object to see if it will produce valid XML.
	 */
	public boolean isValid () {

		if (!(this instanceof Validateable)) {
			return (true);
		}

		java.util.Vector errors = getValidationErrors(true);
		if (errors == null || errors.size() < 1) {
			return (true);
		}

		return (false);
	}


	/**
	 * Checks each field on the object for validity and
	 * returns a Vector holding the validation errors.
	 */
	public java.util.Vector getValidationErrors () {
		return (getValidationErrors(false));
	}


	/**
	 * Checks each field on the object for validity and
	 * returns a java.util.Vector holding the validation errors.
	 *
	 * @return  a Vector containing the validation errors
	 */
	public java.util.Vector getValidationErrors (boolean return_on_error) {
		return (getValidationErrors(return_on_error, true));
	}


	/**
	 * Checks each field on the object for validity and
	 * returns a Vector holding the validation errors.
	 *
	 * @return  a Vector containing the validation errors
	 */
	public java.util.Vector getValidationErrors (
		boolean return_on_error, boolean traverse) {

		createValidators();

		java.util.Vector errors;
		if (_unexpected_xml_errors_ != null &&
				_unexpected_xml_errors_.size() > 0) {
			errors = (java.util.Vector)_unexpected_xml_errors_.clone();
			if (return_on_error) {
				return (errors);
			}
		} else {
			errors = new java.util.Vector(4, 4);
		}

		XmlValidationError e;
		e = _Type_validator_.validate(
			_Type, Type.class);
		if (e != null) {
			errors.addElement(e);
			if (return_on_error) {
				return (errors);
			}
		}

		e = _Mandatory_validator_.validate(
			_has_Mandatory_, _format_errors);
		if (e != null) {
			errors.addElement(e);
			if (return_on_error) {
				return (errors);
			}
		}

		e = _OinkPartyFilter_validator_.validate(
			_OinkPartyFilter, OinkPartyFilter.class);
		if (e != null) {
			errors.addElement(e);
			if (return_on_error) {
				return (errors);
			}
		}


		if (!traverse) {
			if (errors.size() < 1) {
				return (null);
			}

			return (errors);
		}


		boolean is_valid;

		is_valid = _Field_validator_.isValid(
			_Field,
			errors, return_on_error, traverse);
		if (!is_valid && return_on_error) {
			return (errors);
		}



		if (errors.size() < 1) {
			return (null);
		}

		return (errors);
	}


	/**
	 * Checks the XML to see whether it matches the
	 * XML contents of this class.
	 */
	public static boolean matches (XmlElement xml, XmlObject parent) {

		if (xml == null) {
			return (false);
		}

		return (xml.matches($RECORD, nsm, parent));
	}


	/**
	 * This method unmarshals an XML document instance
	 * into an instance of this class.
	 */
	public static Record unmarshal (
			InputStream in) throws Exception {

		Record obj = new Record();
		ObjectFactory.unmarshal(obj, in);
		return (obj);
	}


	/**
	 * Populates this object with the values from the 
	 * parsed XML.
	 * @deprecated  will be removed in a future release.
	 * Use {@link #unmarshal(XmlElement)}.
	 */
	public void fromXml (XmlElement xml) {
		unmarshal(xml);
	}


	/**
	 * Populates this object with the values from the 
	 * parsed XML.
	 *
	 * @since 2.5
	 */
	public void unmarshal (XmlElement xml) {

		if (xml == null) {
			return;
		}

		if (!xml.matches($RECORD, this)) {
			return;
		}

		java.util.Vector doc_namespaces = xml.getDeclaredNamespaces();
		if (doc_namespaces != null) {
			_doc_declared_namespaces_ = 
				(java.util.Vector)doc_namespaces.clone();
		}

		unmarshalAttributes(xml);

		/*
		 * Get the contained XmlElement, this is what we process
		 */
		xml = xml.getChildAt(0);
		if (xml == null) {
			return;
		}

		if (xml.matches($FIELD,
			Field.nsm, this)) {

			setField(xml);
			xml = xml.next();
			if (xml == null) {
				return;
			}
		}


		if (xml != null) {

			_unexpected_xml_errors_ =
				XmlValidationError.addUnexpectedXmlError(
					this, _unexpected_xml_errors_, xml);
		}
	}


	/**
	 * Unmarshal any attributes.
	 *
	 * @param xml the XmlElement holding the parsed XML
	 * @since 2.5
	 */
	protected void unmarshalAttributes (XmlElement xml) {

		/*
		 * Set the attribute based field(s)
		 */
		setType(xml.getAttribute($TYPE, this));
		setMandatory(xml.getAttribute($MANDATORY, this));
		setOinkPartyFilter(xml.getAttribute($OINK_PARTY_FILTER, this));
	}


	/**
	 * Writes this instance to a stream. 
	 *
	 * @param  stream  the OutputStream to write the XML object to
	 * @deprecated  This method will be removed in a future release.
	 * Use {@link #marshal(XmlOutputStream)} or {@link #marshal(OutputStream)}.
	 */
	public void toXml (OutputStream stream) {
		marshal(stream);
	}


	/**
	 * Writes this instance to a stream. 
	 *
	 * @param  stream  the OutputStream to write the XML object to
	 * @param  embed_files  set to true to embed files in the XML
	 * @deprecated  This method will be removed in a future release.
	 * Use {@link #marshal(XmlOutputStream)} or {@link #marshal(OutputStream)}.
	 */
	public void toXml (OutputStream stream, boolean embed_files) {

		XmlOutputStream out = new FormattedOutputStream(stream);
		out.setEmbedFiles(embed_files);
		marshal(out);
	}


	/**
	 * Writes this instance to a stream. 
	 *
	 * @param  stream  the OutputStream to write the XML object to
	 * @param  embed_files  set to true to embed files in the XML
	 * @deprecated  This method will be removed in a future release.
	 * Use {@link #marshal(XmlOutputStream)} or {@link #marshal(OutputStream)}.
	 */
	public void toXml (
			OutputStream stream, String indent, boolean embed_files)	{

		FormattedOutputStream out = new FormattedOutputStream(stream);
		out.setIndentString(indent);
		out.setEmbedFiles(embed_files);
		marshal(out);
	}


	/**
	 * Writes this instance to a stream. If the OutputStream is not an
	 * instance of XmlOutputStream then a FormattedOutputStream
	 * will be created which wraps the OutputStream.
	 *
	 * @param  stream  the OutputStream to write the XML object to
	 * @see #marshal(XmlOutputStream)
	 * @since 2.5
	 */
	public void marshal (OutputStream stream) {

		XmlOutputStream out = new FormattedOutputStream(stream);
		marshal(out);
	}


	/**
	 * Writes this instance to an XmlOutputStream.
	 *
	 * @param  out  the XmlOutputStream to write the XML object to
	 * @see #marshal(OutputStream)
	 * @since 2.5
	 */
	public void marshal (XmlOutputStream out) {

		XmlAttributeList attrs = new XmlAttributeList(nsm);
		attrs = marshalAttributes(attrs);
		out.pushScope();
		out.writeStartTag(getXmlTagName(), attrs, false);
		out.incrementIndent();

		out.write(null,
			getField());

		out.decrementIndent();
		out.writeEndTag(getXmlTagName());
		out.popScope();
	}


	/**
	 * Get the XmlAttributeList for marshalling.
	 *
	 * @param attrs  the currently populated XmlAttributeList.
	 * @return  a populated XmlAttributeList
	 * @since 2.5
	 */
	protected XmlAttributeList marshalAttributes (XmlAttributeList attrs) {

		if (attrs == null) {
			attrs = new XmlAttributeList();
		}

		attrs.add($TYPE, _Type);
		attrs.add($MANDATORY, _Mandatory, _has_Mandatory_);
		attrs.add($OINK_PARTY_FILTER, _OinkPartyFilter);

		return (attrs);
	}


	/**
	 * Get this object's parent object.
	 */
	public XmlObject get$Parent () {
		return (_parent_);
	}


	/**
	 * Set this object's parent object.
	 */
	public void set$Parent (XmlObject parent) {
		_parent_ = parent;
	}


	/**
	 * The default <code>XmlNamespaceManager</code> for this class.
	 * @since 2.5
	 */
	public static XmlNamespaceManager nsm = null;


	/**
	 * Get the <code>XmlNamespaceManager</code> for this class.
	 * This will be null if no namespaces on this class or if
	 * namespace support is disabled during code generation.
	 *
	 * @since 2.5
	 */
	public XmlNamespaceManager get$NamespaceManager () {
		return (nsm);
	}


	/**
	 * Storage for namespaces declared in the input document.
	 * @since 2.5
	 */
	protected java.util.Vector _doc_declared_namespaces_ = null;


	/**
	 * Get the Vector holding the namespaces declared in the element
	 * that this instance was unmarshalled from.
	 *
	 * @since 2.5
	 */
	public java.util.Vector get$DocumentNamespaces () {
		return (_doc_declared_namespaces_);
	}


	/**
	 * Enumeration types for the Type property.
	 */
	public static final class Type
			extends com.tbf.util.EnumType {

		public static final Type OR01 = 
			new Type(0, "OR01");
		public static final Type ONNN = 
			new Type(1, "ONnn");
		public static final Type AN01 = 
			new Type(2, "AN01");
		public static final Type AN02 = 
			new Type(3, "AN02");
		public static final Type AN03 = 
			new Type(4, "AN03");
		public static final Type AN04 = 
			new Type(5, "AN04");
		public static final Type EI01 = 
			new Type(6, "EI01");
		public static final Type EI02 = 
			new Type(7, "EI02");
		public static final Type LV01 = 
			new Type(8, "LV01");
		public static final Type CO01 = 
			new Type(9, "CO01");
		public static final Type AG01 = 
			new Type(10, "AG01");
		public static final Type AG02 = 
			new Type(11, "AG02");
		public static final Type PI01 = 
			new Type(12, "PI01");
		public static final Type RPNN = 
			new Type(13, "RPnn");
		public static final Type SRNN = 
			new Type(14, "SRnn");
		public static final Type SCNN = 
			new Type(15, "SCnn");
		public static final Type PTNN = 
			new Type(16, "PTnn");
		public static final Type TOTL = 
			new Type(17, "TOTL");


		protected Type(int value, String desc) {
			super(value, desc);
		}


		public static final java.util.Enumeration elements () {
			return (elements(Type.class));
		}


		public static final Type fromString (String str) {
			return ((Record.Type)
				getByString(Record.Type.class, str));
		}
	}


	/**
	 * Enumeration types for the OinkPartyFilter property.
	 */
	public static final class OinkPartyFilter
			extends com.tbf.util.EnumType {

		public static final OinkPartyFilter INS = 
			new OinkPartyFilter(0, "INS");
		public static final OinkPartyFilter PWA = 
			new OinkPartyFilter(1, "PWA");


		protected OinkPartyFilter(int value, String desc) {
			super(value, desc);
		}


		public static final java.util.Enumeration elements () {
			return (elements(OinkPartyFilter.class));
		}


		public static final OinkPartyFilter fromString (String str) {
			return ((Record.OinkPartyFilter)
				getByString(Record.OinkPartyFilter.class, str));
		}
	}
}
