/*
 * DO NOT EDIT!
 *
 * This file was generated by the Breeze XML Studio code generator.
 *
 *        Project: file:/C:/nbA/Requirement/EMSIPHIOrder.xsd Binding
 *     Class Name: Questionnaire
 *           Date: Mon Nov 11 14:48:46 CST 2002
 * Breeze Version: 3.0.0 build 382
 *
 * IMPORTANT: Please see your Breeze license for more information on
 *            where and how this generated code may be used.
 *
 */

package com.csc.fsg.nba.provideradapter.emsischema;


import java.io.InputStream;
import java.io.OutputStream;

import com.tbf.xml.FormattedOutputStream;
import com.tbf.xml.Validateable;
import com.tbf.xml.XmlAttributeList;
import com.tbf.xml.XmlElement;
import com.tbf.xml.XmlIntegerValidator;
import com.tbf.xml.XmlNamespaceManager;
import com.tbf.xml.XmlObject;
import com.tbf.xml.XmlOutputStream;
import com.tbf.xml.XmlStringValidator;
import com.tbf.xml.XmlValidationError;
import com.tbf.xml.XmlValidator;

/**
 * Questionnaire class.
 *
 */
public class Questionnaire
	implements com.tbf.xml.XmlObject,
	com.tbf.xml.Validateable,
	java.io.Serializable {

	/**
	 * Constant for "Account" node name.
	 */
	public static final String $ACCOUNT = "Account";

	/**
	 * Constant for "Question5" node name.
	 */
	public static final String $QUESTION5 = "Question5";

	/**
	 * Constant for "Question4" node name.
	 */
	public static final String $QUESTION4 = "Question4";

	/**
	 * Constant for "Questionnaire" node name.
	 */
	public static final String $QUESTIONNAIRE = "Questionnaire";

	/**
	 * Constant for "Question3" node name.
	 */
	public static final String $QUESTION3 = "Question3";

	/**
	 * Constant for "Question2" node name.
	 */
	public static final String $QUESTION2 = "Question2";

	/**
	 * Constant for "CallPlace" node name.
	 */
	public static final String $CALL_PLACE = "CallPlace";

	/**
	 * Constant for "Question1" node name.
	 */
	public static final String $QUESTION1 = "Question1";

	/**
	 * Constant for "CallTime" node name.
	 */
	public static final String $CALL_TIME = "CallTime";

	/**
	 * Constant for "SpecialInstructions" node name.
	 */
	public static final String $SPECIAL_INSTRUCTIONS = "SpecialInstructions";


	/**
	 * Declarations for the XML related fields.
	 */
	protected String _Question1 = null;
	protected String _Question2 = null;
	protected String _Question3 = null;
	protected String _Question4 = null;
	protected String _Question5 = null;
	protected int _CallTime = -1;
	protected boolean _has_CallTime_ = false;
	protected int _CallPlace = -1;
	protected boolean _has_CallPlace_ = false;
	protected String _SpecialInstructions = null;
	protected String _Account = null;


	/**
	 * Holds the parent object of this object.
	 */
	protected transient XmlObject _parent_ = null;


	/**
	 * Storage for UNEXPECTED_XML errors.
	 */
	protected transient java.util.Vector _unexpected_xml_errors_ = null;


	/**
	 * Default no args constructor.
	 */
	public Questionnaire () {
	}


	/**
	 * Creates and populates an instance from the provided parse tree.
	 *
	 * @param  xml  the parse tree
	 */
	public Questionnaire (XmlElement xml) {
		unmarshal(xml);
	}


	/**
	 * Creates and populates an instance from the provided parse tree.
	 *
	 * @param  xml  the parse tree
	 * @param  parent  the containibg XmlObject
	 */
	public Questionnaire (XmlElement xml, XmlObject parent) {
		_parent_ = parent;
		unmarshal(xml);
	}


	/**
	 * Get the Question1 property.
	 */
	public String getQuestion1 () {
		return (_Question1);
	}


	/**
	 * Set the Question1 property.
	 */
	public void setQuestion1 (String newValue) {
		_Question1 = newValue;
	}


	/**
	 * Checks for whether Question1 is set or not.
	 *
	 * @return true if Question1 is set, false if not
	 */
	 public boolean hasQuestion1 () {
		return (_Question1 != null);
	}


	/**
	 * Discards Question1's value.
	 */
	 public void deleteQuestion1 () {
		_Question1 = null;
	}


	/**
	 * Get the Question2 property.
	 */
	public String getQuestion2 () {
		return (_Question2);
	}


	/**
	 * Set the Question2 property.
	 */
	public void setQuestion2 (String newValue) {
		_Question2 = newValue;
	}


	/**
	 * Checks for whether Question2 is set or not.
	 *
	 * @return true if Question2 is set, false if not
	 */
	 public boolean hasQuestion2 () {
		return (_Question2 != null);
	}


	/**
	 * Discards Question2's value.
	 */
	 public void deleteQuestion2 () {
		_Question2 = null;
	}


	/**
	 * Get the Question3 property.
	 */
	public String getQuestion3 () {
		return (_Question3);
	}


	/**
	 * Set the Question3 property.
	 */
	public void setQuestion3 (String newValue) {
		_Question3 = newValue;
	}


	/**
	 * Checks for whether Question3 is set or not.
	 *
	 * @return true if Question3 is set, false if not
	 */
	 public boolean hasQuestion3 () {
		return (_Question3 != null);
	}


	/**
	 * Discards Question3's value.
	 */
	 public void deleteQuestion3 () {
		_Question3 = null;
	}


	/**
	 * Get the Question4 property.
	 */
	public String getQuestion4 () {
		return (_Question4);
	}


	/**
	 * Set the Question4 property.
	 */
	public void setQuestion4 (String newValue) {
		_Question4 = newValue;
	}


	/**
	 * Checks for whether Question4 is set or not.
	 *
	 * @return true if Question4 is set, false if not
	 */
	 public boolean hasQuestion4 () {
		return (_Question4 != null);
	}


	/**
	 * Discards Question4's value.
	 */
	 public void deleteQuestion4 () {
		_Question4 = null;
	}


	/**
	 * Get the Question5 property.
	 */
	public String getQuestion5 () {
		return (_Question5);
	}


	/**
	 * Set the Question5 property.
	 */
	public void setQuestion5 (String newValue) {
		_Question5 = newValue;
	}


	/**
	 * Checks for whether Question5 is set or not.
	 *
	 * @return true if Question5 is set, false if not
	 */
	 public boolean hasQuestion5 () {
		return (_Question5 != null);
	}


	/**
	 * Discards Question5's value.
	 */
	 public void deleteQuestion5 () {
		_Question5 = null;
	}


	/**
	 * Get the CallTime property.
	 */
	public int getCallTime () {
		if (_has_CallTime_) {
			return (_CallTime);
		}

		return (-1);
	}


	/**
	 * Set the CallTime property.
	 */
	public void setCallTime (int new_value) {
		_CallTime = new_value;
		_has_CallTime_ = true;
		_format_errors.remove("Questionnaire.CallTime");
	}


	public void setCallTime (String new_value) {

		if (new_value == null) {
			_CallTime = -1;
			_has_CallTime_ = false;
			return;
		}

		try {
			_CallTime = Integer.parseInt(new_value);
			_has_CallTime_ = true;
			_format_errors.remove("Questionnaire.CallTime");
		} catch (NumberFormatException nfe) {
			_has_CallTime_ = false;
			XmlValidationError.addValidityFormatError(
				_format_errors, "Questionnaire.CallTime", "Element",
				"Questionnaire/CallTime", new_value);
		}
	}


	/**
	 * Checks for whether CallTime is set or not.
	 *
	 * @return true if CallTime is set, false if not
	 */
	public boolean hasCallTime () {
		return (_has_CallTime_);
	}


	/**
	 * Discards CallTime's value.
	 */
	public void deleteCallTime () {
		_has_CallTime_ = false;
		_format_errors.remove("Questionnaire.CallTime");
	}


	/**
	 * Get the CallPlace property.
	 */
	public int getCallPlace () {
		if (_has_CallPlace_) {
			return (_CallPlace);
		}

		return (-1);
	}


	/**
	 * Set the CallPlace property.
	 */
	public void setCallPlace (int new_value) {
		_CallPlace = new_value;
		_has_CallPlace_ = true;
		_format_errors.remove("Questionnaire.CallPlace");
	}


	public void setCallPlace (String new_value) {

		if (new_value == null) {
			_CallPlace = -1;
			_has_CallPlace_ = false;
			return;
		}

		try {
			_CallPlace = Integer.parseInt(new_value);
			_has_CallPlace_ = true;
			_format_errors.remove("Questionnaire.CallPlace");
		} catch (NumberFormatException nfe) {
			_has_CallPlace_ = false;
			XmlValidationError.addValidityFormatError(
				_format_errors, "Questionnaire.CallPlace", "Element",
				"Questionnaire/CallPlace", new_value);
		}
	}


	/**
	 * Checks for whether CallPlace is set or not.
	 *
	 * @return true if CallPlace is set, false if not
	 */
	public boolean hasCallPlace () {
		return (_has_CallPlace_);
	}


	/**
	 * Discards CallPlace's value.
	 */
	public void deleteCallPlace () {
		_has_CallPlace_ = false;
		_format_errors.remove("Questionnaire.CallPlace");
	}


	/**
	 * Get the SpecialInstructions property.
	 */
	public String getSpecialInstructions () {
		return (_SpecialInstructions);
	}


	/**
	 * Set the SpecialInstructions property.
	 */
	public void setSpecialInstructions (String newValue) {
		_SpecialInstructions = newValue;
	}


	/**
	 * Checks for whether SpecialInstructions is set or not.
	 *
	 * @return true if SpecialInstructions is set, false if not
	 */
	 public boolean hasSpecialInstructions () {
		return (_SpecialInstructions != null);
	}


	/**
	 * Discards SpecialInstructions's value.
	 */
	 public void deleteSpecialInstructions () {
		_SpecialInstructions = null;
	}


	/**
	 * Get the Account property.
	 */
	public String getAccount () {
		return (_Account);
	}


	/**
	 * Set the Account property.
	 */
	public void setAccount (String newValue) {
		_Account = newValue;
	}


	/**
	 * Checks for whether Account is set or not.
	 *
	 * @return true if Account is set, false if not
	 */
	 public boolean hasAccount () {
		return (_Account != null);
	}


	/**
	 * Discards Account's value.
	 */
	 public void deleteAccount () {
		_Account = null;
	}


	protected String _node_name_ = $QUESTIONNAIRE;

	/**
	 * Get the XML tag name for this instance.
	 */
	public String getXmlTagName () {
		return (_node_name_);
	}


	/**
	 * Set the XML tag name for this instance.
	 */
	public void setXmlTagName (String node_name) {
		_node_name_ = node_name;
	}


	/**
	 * Gets the XML tag name for this class.
	 */
	public static String getClassXmlTagName () {
		return ($QUESTIONNAIRE);
	}


	/**
	 * Keeps track of format errors that are
	 * thrown in the numeric setXXX() methods().
	 */
	protected java.util.Hashtable _format_errors =
		new java.util.Hashtable();


	/**
	 * This flag is used to used to check whether
	 * the validators have been created.
	 */
	transient protected static boolean _validators_created = false;

	/*
	 * XML Validators
	 */
	transient protected static XmlStringValidator 
		_Question1_validator_ = null;
	transient protected static XmlStringValidator 
		_Question2_validator_ = null;
	transient protected static XmlStringValidator 
		_Question3_validator_ = null;
	transient protected static XmlStringValidator 
		_Question4_validator_ = null;
	transient protected static XmlStringValidator 
		_Question5_validator_ = null;
	transient protected static XmlIntegerValidator
		_CallTime_validator_ = null;
	transient protected static XmlIntegerValidator
		_CallPlace_validator_ = null;
	transient protected static XmlStringValidator 
		_SpecialInstructions_validator_ = null;
	transient protected static XmlStringValidator 
		_Account_validator_ = null;

	/**
	 * Create the validators for this class.
	 */
	protected static synchronized void createValidators () {

		if (_validators_created) {
			return;
		}

		_Question1_validator_ = new XmlStringValidator(
			"Questionnaire.Question1", "Element", 
			"Questionnaire/Question1", -1, -1, 1, 1);

		_Question2_validator_ = new XmlStringValidator(
			"Questionnaire.Question2", "Element", 
			"Questionnaire/Question2", -1, -1, 1, 1);

		_Question3_validator_ = new XmlStringValidator(
			"Questionnaire.Question3", "Element", 
			"Questionnaire/Question3", -1, -1, 1, 1);

		_Question4_validator_ = new XmlStringValidator(
			"Questionnaire.Question4", "Element", 
			"Questionnaire/Question4", -1, -1, 1, 1);

		_Question5_validator_ = new XmlStringValidator(
			"Questionnaire.Question5", "Element", 
			"Questionnaire/Question5", -1, -1, 1, 1);

		_CallTime_validator_ = new XmlIntegerValidator(
			"Questionnaire.CallTime", "Element",
			"Questionnaire/CallTime",
			0, XmlValidator.NOT_USED,
			0, XmlValidator.NOT_USED, 1, 1);

		_CallPlace_validator_ = new XmlIntegerValidator(
			"Questionnaire.CallPlace", "Element",
			"Questionnaire/CallPlace",
			0, XmlValidator.NOT_USED,
			0, XmlValidator.NOT_USED, 1, 1);

		_SpecialInstructions_validator_ = new XmlStringValidator(
			"Questionnaire.SpecialInstructions", "Element", 
			"Questionnaire/SpecialInstructions", -1, -1, 1, 1);

		_Account_validator_ = new XmlStringValidator(
			"Questionnaire.Account", "Element", 
			"Questionnaire/Account", -1, -1, 1, 1);

		_validators_created = true;
	}


	/**
	 * Checks this object to see if it will produce valid XML.
	 */
	public boolean isValid () {

		if (!(this instanceof Validateable)) {
			return (true);
		}

		java.util.Vector errors = getValidationErrors(true);
		if (errors == null || errors.size() < 1) {
			return (true);
		}

		return (false);
	}


	/**
	 * Checks each field on the object for validity and
	 * returns a Vector holding the validation errors.
	 */
	public java.util.Vector getValidationErrors () {
		return (getValidationErrors(false));
	}


	/**
	 * Checks each field on the object for validity and
	 * returns a java.util.Vector holding the validation errors.
	 *
	 * @return  a Vector containing the validation errors
	 */
	public java.util.Vector getValidationErrors (boolean return_on_error) {
		return (getValidationErrors(return_on_error, true));
	}


	/**
	 * Checks each field on the object for validity and
	 * returns a Vector holding the validation errors.
	 *
	 * @return  a Vector containing the validation errors
	 */
	public java.util.Vector getValidationErrors (
		boolean return_on_error, boolean traverse) {

		createValidators();

		java.util.Vector errors;
		if (_unexpected_xml_errors_ != null &&
				_unexpected_xml_errors_.size() > 0) {
			errors = (java.util.Vector)_unexpected_xml_errors_.clone();
			if (return_on_error) {
				return (errors);
			}
		} else {
			errors = new java.util.Vector(4, 4);
		}

		XmlValidationError e;
		e = _Question1_validator_.validate(
			_Question1);
		if (e != null) {
			errors.addElement(e);
			if (return_on_error) {
				return (errors);
			}
		}

		e = _Question2_validator_.validate(
			_Question2);
		if (e != null) {
			errors.addElement(e);
			if (return_on_error) {
				return (errors);
			}
		}

		e = _Question3_validator_.validate(
			_Question3);
		if (e != null) {
			errors.addElement(e);
			if (return_on_error) {
				return (errors);
			}
		}

		e = _Question4_validator_.validate(
			_Question4);
		if (e != null) {
			errors.addElement(e);
			if (return_on_error) {
				return (errors);
			}
		}

		e = _Question5_validator_.validate(
			_Question5);
		if (e != null) {
			errors.addElement(e);
			if (return_on_error) {
				return (errors);
			}
		}

		e = _CallTime_validator_.validate(
			_CallTime,
			_has_CallTime_, _format_errors);
		if (e != null) {
			errors.addElement(e);
			if (return_on_error) {
				return (errors);
			}
		}

		e = _CallPlace_validator_.validate(
			_CallPlace,
			_has_CallPlace_, _format_errors);
		if (e != null) {
			errors.addElement(e);
			if (return_on_error) {
				return (errors);
			}
		}

		e = _SpecialInstructions_validator_.validate(
			_SpecialInstructions);
		if (e != null) {
			errors.addElement(e);
			if (return_on_error) {
				return (errors);
			}
		}

		e = _Account_validator_.validate(
			_Account);
		if (e != null) {
			errors.addElement(e);
			if (return_on_error) {
				return (errors);
			}
		}


		if (errors.size() < 1) {
			return (null);
		}

		return (errors);
	}


	/**
	 * Checks the XML to see whether it matches the
	 * XML contents of this class.
	 */
	public static boolean matches (XmlElement xml, XmlObject parent) {

		if (xml == null) {
			return (false);
		}

		return (xml.matches($QUESTIONNAIRE, nsm, parent));
	}


	/**
	 * This method unmarshals an XML document instance
	 * into an instance of this class.
	 */
	public static Questionnaire unmarshal (
			InputStream in) throws Exception {

		Questionnaire obj = new Questionnaire();
		ObjectFactory.unmarshal(obj, in);
		return (obj);
	}


	/**
	 * Populates this object with the values from the 
	 * parsed XML.
	 * @deprecated  will be removed in a future release.
	 * Use {@link #unmarshal(XmlElement)}.
	 */
	public void fromXml (XmlElement xml) {
		unmarshal(xml);
	}


	/**
	 * Populates this object with the values from the 
	 * parsed XML.
	 *
	 * @since 2.5
	 */
	public void unmarshal (XmlElement xml) {

		if (xml == null) {
			return;
		}

		if (!xml.matches($QUESTIONNAIRE, this)) {
			return;
		}

		java.util.Vector doc_namespaces = xml.getDeclaredNamespaces();
		if (doc_namespaces != null) {
			_doc_declared_namespaces_ = 
				(java.util.Vector)doc_namespaces.clone();
		}

		unmarshalAttributes(xml);

		/*
		 * Get the contained XmlElement, this is what we process
		 */
		xml = xml.getChildAt(0);
		if (xml == null) {
			return;
		}

		if (xml.matches($QUESTION1, this)) {
			setQuestion1(xml.getData());
			xml = xml.next();
			if (xml == null) {
				return;
			}
		}

		if (xml.matches($QUESTION2, this)) {
			setQuestion2(xml.getData());
			xml = xml.next();
			if (xml == null) {
				return;
			}
		}

		if (xml.matches($QUESTION3, this)) {
			setQuestion3(xml.getData());
			xml = xml.next();
			if (xml == null) {
				return;
			}
		}

		if (xml.matches($QUESTION4, this)) {
			setQuestion4(xml.getData());
			xml = xml.next();
			if (xml == null) {
				return;
			}
		}

		if (xml.matches($QUESTION5, this)) {
			setQuestion5(xml.getData());
			xml = xml.next();
			if (xml == null) {
				return;
			}
		}

		if (xml.matches($CALL_TIME, this)) {
			setCallTime(xml.getData());
			xml = xml.next();
			if (xml == null) {
				return;
			}
		}

		if (xml.matches($CALL_PLACE, this)) {
			setCallPlace(xml.getData());
			xml = xml.next();
			if (xml == null) {
				return;
			}
		}

		if (xml.matches($SPECIAL_INSTRUCTIONS, this)) {
			setSpecialInstructions(xml.getData());
			xml = xml.next();
			if (xml == null) {
				return;
			}
		}

		if (xml.matches($ACCOUNT, this)) {
			setAccount(xml.getData());
			xml = xml.next();
			if (xml == null) {
				return;
			}
		}

		if (xml != null) {

			_unexpected_xml_errors_ =
				XmlValidationError.addUnexpectedXmlError(
					this, _unexpected_xml_errors_, xml);
		}
	}


	/**
	 * Unmarshal any attributes.
	 *
	 * @param xml the XmlElement holding the parsed XML
	 * @since 2.5
	 */
	protected void unmarshalAttributes (XmlElement xml) {
	}


	/**
	 * Writes this instance to a stream. 
	 *
	 * @param  stream  the OutputStream to write the XML object to
	 * @deprecated  This method will be removed in a future release.
	 * Use {@link #marshal(XmlOutputStream)} or {@link #marshal(OutputStream)}.
	 */
	public void toXml (OutputStream stream) {
		marshal(stream);
	}


	/**
	 * Writes this instance to a stream. 
	 *
	 * @param  stream  the OutputStream to write the XML object to
	 * @param  embed_files  set to true to embed files in the XML
	 * @deprecated  This method will be removed in a future release.
	 * Use {@link #marshal(XmlOutputStream)} or {@link #marshal(OutputStream)}.
	 */
	public void toXml (OutputStream stream, boolean embed_files) {

		XmlOutputStream out = new FormattedOutputStream(stream);
		out.setEmbedFiles(embed_files);
		marshal(out);
	}


	/**
	 * Writes this instance to a stream. 
	 *
	 * @param  stream  the OutputStream to write the XML object to
	 * @param  embed_files  set to true to embed files in the XML
	 * @deprecated  This method will be removed in a future release.
	 * Use {@link #marshal(XmlOutputStream)} or {@link #marshal(OutputStream)}.
	 */
	public void toXml (
			OutputStream stream, String indent, boolean embed_files)	{

		FormattedOutputStream out = new FormattedOutputStream(stream);
		out.setIndentString(indent);
		out.setEmbedFiles(embed_files);
		marshal(out);
	}


	/**
	 * Writes this instance to a stream. If the OutputStream is not an
	 * instance of XmlOutputStream then a FormattedOutputStream
	 * will be created which wraps the OutputStream.
	 *
	 * @param  stream  the OutputStream to write the XML object to
	 * @see #marshal(XmlOutputStream)
	 * @since 2.5
	 */
	public void marshal (OutputStream stream) {

		XmlOutputStream out = new FormattedOutputStream(stream);
		marshal(out);
	}


	/**
	 * Writes this instance to an XmlOutputStream.
	 *
	 * @param  out  the XmlOutputStream to write the XML object to
	 * @see #marshal(OutputStream)
	 * @since 2.5
	 */
	public void marshal (XmlOutputStream out) {

		XmlAttributeList attrs = new XmlAttributeList(nsm);
		attrs = marshalAttributes(attrs);
		out.pushScope();
		out.writeStartTag(getXmlTagName(), attrs, false);
		out.incrementIndent();

		out.write($QUESTION1,
			_Question1);
		out.write($QUESTION2,
			_Question2);
		out.write($QUESTION3,
			_Question3);
		out.write($QUESTION4,
			_Question4);
		out.write($QUESTION5,
			_Question5);
		out.write($CALL_TIME,
			_CallTime, _has_CallTime_);
		out.write($CALL_PLACE,
			_CallPlace, _has_CallPlace_);
		out.write($SPECIAL_INSTRUCTIONS,
			_SpecialInstructions);
		out.write($ACCOUNT,
			_Account);

		out.decrementIndent();
		out.writeEndTag(getXmlTagName());
		out.popScope();
	}


	/**
	 * Get the XmlAttributeList for marshalling.
	 *
	 * @param attrs  the currently populated XmlAttributeList.
	 * @return  a populated XmlAttributeList
	 * @since 2.5
	 */
	protected XmlAttributeList marshalAttributes (XmlAttributeList attrs) {

		return (attrs);
	}


	/**
	 * Get this object's parent object.
	 */
	public XmlObject get$Parent () {
		return (_parent_);
	}


	/**
	 * Set this object's parent object.
	 */
	public void set$Parent (XmlObject parent) {
		_parent_ = parent;
	}


	/**
	 * The default <code>XmlNamespaceManager</code> for this class.
	 * @since 2.5
	 */
	public static XmlNamespaceManager nsm = null;


	/**
	 * Get the <code>XmlNamespaceManager</code> for this class.
	 * This will be null if no namespaces on this class or if
	 * namespace support is disabled during code generation.
	 *
	 * @since 2.5
	 */
	public XmlNamespaceManager get$NamespaceManager () {
		return (nsm);
	}


	/**
	 * Storage for namespaces declared in the input document.
	 * @since 2.5
	 */
	protected java.util.Vector _doc_declared_namespaces_ = null;


	/**
	 * Get the Vector holding the namespaces declared in the element
	 * that this instance was unmarshalled from.
	 *
	 * @since 2.5
	 */
	public java.util.Vector get$DocumentNamespaces () {
		return (_doc_declared_namespaces_);
	}
}
